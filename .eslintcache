[{"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\index.js":"1","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\App.js":"2","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\themes\\index.js":"3","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\index.js":"4","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\layouts\\index.js":"5","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\index.js":"6","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\themes\\themes.js":"7","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\layouts\\MainLayout.js":"8","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\navigationData.js":"9","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Navigation\\Navigation.js":"10","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\RoutesWithLayout.js":"11","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\PageHeader.js":"12","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Spinner.js":"13","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\PageBody.js":"14","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\routesData.js":"15","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Routes\\Routes.js":"16","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Navigation\\components\\NavigationItem.js":"17","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Database\\routes.js":"18","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Main\\main.js":"19","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Test\\jsonDummy.js":"20","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\routes.js":"21","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Test\\routes.js":"22","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\routes.js":"23","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\createKey.js":"24","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckSymmetricKeyDialog.js":"25","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckRSAKeyDialog.js":"26","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckInputSymmetricKeyDialog.js":"27","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateSymmetricKey.js":"28","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\logSearch.js":"29","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\decryption.js":"30","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateRSAKey.js":"31","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\pathSetting.js":"32","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateInputSymmetricKey.js":"33","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\routes.js":"34","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manualPage.js":"35","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\constatant.js":"36","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manualContent.js":"37","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manual.js":"38","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\jsonLive.js":"39","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\routes.js":"40","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\filePathSetting.js":"41","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkKey.js":"42","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\excelPathSetting.js":"43","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\directoryPathSetting.js":"44","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\databaseLive.js":"45","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\setting.js":"46","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\stringEncryption.js":"47","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\progressbar.js":"48","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\fileEncryption.js":"49","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\routes.js":"50","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\filePathSetting.js":"51","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\directoryEncryption.js":"52","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\directoryPathSetting.js":"53","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\stringDecryption.js":"54","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\progressbar.js":"55","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\fileDecryption.js":"56","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\directoryDecryption.js":"57","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Database\\setting.js":"58","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\url\\baseUrl.js":"59","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\MainCard.js":"60"},{"size":168,"mtime":1665110945691,"results":"61","hashOfConfig":"62"},{"size":1203,"mtime":1669635691231,"results":"63","hashOfConfig":"62"},{"size":26,"mtime":1655071201000,"results":"64","hashOfConfig":"62"},{"size":64,"mtime":1655071201000,"results":"65","hashOfConfig":"62"},{"size":54,"mtime":1655071201000,"results":"66","hashOfConfig":"62"},{"size":337,"mtime":1655071201000,"results":"67","hashOfConfig":"62"},{"size":708,"mtime":1661440094132,"results":"68","hashOfConfig":"62"},{"size":7535,"mtime":1665116418208,"results":"69","hashOfConfig":"62"},{"size":2998,"mtime":1669273317102,"results":"70","hashOfConfig":"62"},{"size":1051,"mtime":1665114304646,"results":"71","hashOfConfig":"62"},{"size":516,"mtime":1665114379477,"results":"72","hashOfConfig":"62"},{"size":1145,"mtime":1665112271409,"results":"73","hashOfConfig":"62"},{"size":760,"mtime":1665114392884,"results":"74","hashOfConfig":"62"},{"size":595,"mtime":1665116972861,"results":"75","hashOfConfig":"62"},{"size":3002,"mtime":1669273358029,"results":"76","hashOfConfig":"62"},{"size":832,"mtime":1665111944755,"results":"77","hashOfConfig":"62"},{"size":3530,"mtime":1669635622654,"results":"78","hashOfConfig":"62"},{"size":291,"mtime":1664714161259,"results":"79","hashOfConfig":"62"},{"size":2409,"mtime":1670545104586,"results":"80","hashOfConfig":"62"},{"size":131,"mtime":1667746139460,"results":"81","hashOfConfig":"62"},{"size":285,"mtime":1661782380394,"results":"82","hashOfConfig":"62"},{"size":291,"mtime":1669481512595,"results":"83","hashOfConfig":"62"},{"size":285,"mtime":1661782380394,"results":"84","hashOfConfig":"62"},{"size":5575,"mtime":1669655048895,"results":"85","hashOfConfig":"62"},{"size":1185,"mtime":1664799616116,"results":"86","hashOfConfig":"62"},{"size":1195,"mtime":1664799622405,"results":"87","hashOfConfig":"62"},{"size":1243,"mtime":1664800316110,"results":"88","hashOfConfig":"62"},{"size":2597,"mtime":1668567405167,"results":"89","hashOfConfig":"62"},{"size":3526,"mtime":1669464132563,"results":"90","hashOfConfig":"62"},{"size":9244,"mtime":1669464132559,"results":"91","hashOfConfig":"62"},{"size":2617,"mtime":1668567394036,"results":"92","hashOfConfig":"62"},{"size":2240,"mtime":1669464132566,"results":"93","hashOfConfig":"62"},{"size":2671,"mtime":1664801213501,"results":"94","hashOfConfig":"62"},{"size":291,"mtime":1655071201000,"results":"95","hashOfConfig":"62"},{"size":1580,"mtime":1669635776222,"results":"96","hashOfConfig":"62"},{"size":2950,"mtime":1664332756938,"results":"97","hashOfConfig":"62"},{"size":2881,"mtime":1664286958991,"results":"98","hashOfConfig":"62"},{"size":1439,"mtime":1664333092767,"results":"99","hashOfConfig":"62"},{"size":6333,"mtime":1668472133042,"results":"100","hashOfConfig":"62"},{"size":291,"mtime":1655071201000,"results":"101","hashOfConfig":"62"},{"size":1827,"mtime":1669211679963,"results":"102","hashOfConfig":"62"},{"size":10374,"mtime":1669636027677,"results":"103","hashOfConfig":"62"},{"size":1750,"mtime":1667837864068,"results":"104","hashOfConfig":"62"},{"size":1896,"mtime":1669211798602,"results":"105","hashOfConfig":"62"},{"size":6054,"mtime":1668474644244,"results":"106","hashOfConfig":"62"},{"size":9310,"mtime":1669635339011,"results":"107","hashOfConfig":"62"},{"size":5114,"mtime":1669635158300,"results":"108","hashOfConfig":"62"},{"size":532,"mtime":1669464132543,"results":"109","hashOfConfig":"62"},{"size":5791,"mtime":1669634878046,"results":"110","hashOfConfig":"62"},{"size":291,"mtime":1655071201000,"results":"111","hashOfConfig":"62"},{"size":1827,"mtime":1669273418047,"results":"112","hashOfConfig":"62"},{"size":7178,"mtime":1669464132537,"results":"113","hashOfConfig":"62"},{"size":1896,"mtime":1669273276239,"results":"114","hashOfConfig":"62"},{"size":5137,"mtime":1669635234776,"results":"115","hashOfConfig":"62"},{"size":484,"mtime":1669464132530,"results":"116","hashOfConfig":"62"},{"size":6086,"mtime":1669634821248,"results":"117","hashOfConfig":"62"},{"size":7178,"mtime":1669596539570,"results":"118","hashOfConfig":"62"},{"size":22505,"mtime":1669635495823,"results":"119","hashOfConfig":"62"},{"size":148,"mtime":1665202631675,"results":"120","hashOfConfig":"62"},{"size":2937,"mtime":1665652284659,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1azas2v",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"124"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"124"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"124"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"124"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"124"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"124"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"124"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"124"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"124"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"124"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"124"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"124"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\index.js",[],["263","264"],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\App.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\themes\\index.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\index.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\layouts\\index.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\index.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\themes\\themes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\layouts\\MainLayout.js",["265","266"],"import React, { Fragment } from \"react\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport {\n  AppBar,\n  CssBaseline,\n  Divider,\n  Drawer,\n  Hidden,\n  IconButton,\n  Toolbar,\n  Typography,\n  Switch,\n} from \"@material-ui/core\";\nimport {\n  Menu as MenuIcon,\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n  GitHub,\n} from \"@material-ui/icons\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router\";\n\nimport { Navigation } from \"../components\";\nimport { Favorite } from \"@material-ui/icons\";\n\nconst drawerWidth = 220;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    height: \"100vh\",\n  },\n  appBarShift: {\n    [theme.breakpoints.up(\"sm\")]: {\n      zIndex: theme.zIndex.drawer + 2,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      zIndex: theme.zIndex.drawer + 2,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  collapseButton: {\n    color: \"inherit\",\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none\",\n    },\n  },\n  extendButton: {\n    marginRight: 36,\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none\",\n    },\n  },\n  extendButtonHidden: {\n    display: \"none\",\n  },\n  toolbar: { paddingRight: 24, ...theme.mixins.toolbar },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 0 10px 8px\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    position: \"fixed\",\n    height: \"100vh\",\n    whiteSpace: \"nowrap\",\n    transition: theme.transitions.create([\"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n\n    color: theme.palette.type === \"light\" && theme.palette.grey[100],\n    backgroundColor: theme.palette.secondary.main,\n  },\n  drawerPaperClose: {\n    [theme.breakpoints.up(\"sm\")]: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(11),\n    },\n  },\n  appBarTitle: {\n    flex: 1,\n    fontWeight: 200,\n  },\n  contentShift: {\n    flexGrow: 1,\n    overflow: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(10),\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n  },\n  content: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n  },\n\n  drawerFooter: {\n    flex: 1,\n    alignItems: \"flex-end\",\n    justifyContent: \"center\",\n    padding: theme.spacing(2),\n  },\n  copyrightText: {\n    fontSize: 11,\n    transition: \"all .3s\",\n    [theme.breakpoints.up(\"sm\")]: {\n      opacity: (extend) => (extend ? 1 : 0),\n    },\n    display: \"flex\",\n    alignItems: \"center\",\n    textDecoration: \"none\",\n    color: \"inherit\",\n  },\n  scroll: {\n    overflowY: \"auto\",\n    \"&::-webkit-scrollbar\": {\n      width: \"0.4em\",\n    },\n    \"&::-webkit-scrollbar-track\": {\n      background: \"rgba(33, 122, 244, .1)\",\n    },\n    \"&::-webkit-scrollbar-thumb\": {\n      backgroundColor: \"#217af4\",\n      height: \"30%\",\n      outline: \"1px solid slategrey\",\n    },\n    display: \"block\",\n  },\n}));\n\nconst MainLayout = ({ themeConfig, navigationData, children }) => {\n  const history = useHistory();\n  const theme = useTheme();\n  const [extended, setExtended] = React.useState(true);\n  const classes = useStyles(extended);\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleExtendOpen = () => {\n    setExtended(true);\n  };\n  const handleExtendClose = () => {\n    setExtended(false);\n  };\n\n  React.useEffect(() => {\n    history.listen(() => setMobileOpen(false));\n  }, [history]);\n\n  const drawer = (\n    <Fragment>\n      <div className={classes.toolbarIcon}>\n        <IconButton\n          onClick={handleExtendClose}\n          className={classes.collapseButton}\n        >\n          <ChevronLeftIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <Navigation data={navigationData} collapsed={!extended} />\n      <Divider />\n      <Toolbar className={classes.drawerFooter}></Toolbar>\n    </Fragment>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBarShift, extended && classes.appBar)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"extend drawer\"\n            onClick={handleExtendOpen}\n            className={clsx(\n              classes.extendButton,\n              extended && classes.extendButtonHidden\n            )}\n          >\n            <ChevronRightIcon />\n          </IconButton>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap className={classes.appBarTitle}>\n            Kumoh Encryption System\n          </Typography>\n          <Switch\n            checked={themeConfig.state}\n            onChange={themeConfig.handler}\n            name=\"themeSwitch\"\n          />\n        </Toolbar>\n      </AppBar>\n      <Hidden smUp implementation=\"css\">\n        <Drawer\n          variant=\"temporary\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true,\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(\n              classes.drawerPaper,\n              !extended && classes.drawerPaperClose\n            ),\n          }}\n          open={extended}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n      <main className={clsx(classes.contentShift, extended && classes.content)}>\n        <div className={classes.toolbar} />\n        <div className={classes.scroll}>{children}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default MainLayout;\n\nMainLayout.propTypes = {\n  navigationData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  themeConfig: PropTypes.object,\n  window: PropTypes.func,\n  children: PropTypes.node,\n};\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\navigationData.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Navigation\\Navigation.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\RoutesWithLayout.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\PageHeader.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Spinner.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\PageBody.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\data\\routesData.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Routes\\Routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\Navigation\\components\\NavigationItem.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Database\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Main\\main.js",["267","268"],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Test\\jsonDummy.js",["269","270"],"import { Box, Grid } from \"@material-ui/core\";\r\nconst jsonDummy = () => {\r\n  return <span></span>;\r\n};\r\nexport default jsonDummy;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Test\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\createKey.js",["271","272","273","274"],"import React, { useRef, useState } from \"react\";\r\nimport { Box, Grid, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport api from \"../../url/baseUrl\";\r\nimport CheckCreateRSAKey from \"./checkCreateRSAKey\";\r\nimport CheckCreateSymmetricKey from \"./checkCreateSymmetricKey\";\r\nimport CheckCreateInputSymmetricKey from \"./checkCreateInputSymmetricKey\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst CreateKey = () => {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleCreateRSAKey = () => {\r\n    api\r\n      .get(\"key-create/rsa\", {})\r\n      .then((res) => {\r\n        if (res.data.data) {\r\n          swal(\"키 생성 완료!\", \"RSA KEY가 생성되었습니다.\", \"success\").then(\r\n            (result) => {\r\n              if (result) {\r\n                window.location.reload();\r\n              }\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch\r\n      // swal(\"키 생성 실패!\", \"오류 발생! 경로 확인\", \"error\").then(\r\n      //   (result) => {\r\n      //     if (result) {\r\n      //       window.location.reload();\r\n      //     }\r\n      //   }\r\n      // )\r\n      ();\r\n  };\r\n  const handleCreateSymmetricKey = () => {\r\n    api\r\n      .get(\"key-create/lea\", {})\r\n      .then((res) => {\r\n        if (res.data.data) {\r\n          swal(\r\n            \"키 생성 완료!\",\r\n            \"LEA Random KEY가 생성되었습니다.\",\r\n            \"success\"\r\n          ).then((result) => {\r\n            if (result) {\r\n              window.location.reload();\r\n            }\r\n          });\r\n        }\r\n      })\r\n      .catch\r\n      // swal(\"키 생성 실패!\", \"오류 발생! 경로 확인\", \"error\").then(\r\n      //   (result) => {\r\n      //     if (result) {\r\n      //       window.location.reload();\r\n      //     }\r\n      //   }\r\n      // )\r\n      ();\r\n  };\r\n  const handleCreateInputSymmetricKey = () => {\r\n    api\r\n      .post(\"key-create/input-lea\", {\r\n        input: input,\r\n      })\r\n      .then((res) => {\r\n        if (res.data.data) {\r\n          swal(\"키 생성 완료!\", \"LEA KEY가 생성되었습니다.\", \"success\").then(\r\n            (result) => {\r\n              if (result) {\r\n                window.location.reload();\r\n              }\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch\r\n      // swal(\"키 생성 실패!\", \"오류 발생! 경로 확인\", \"error\").then(\r\n      //   (result) => {\r\n      //     if (result) {\r\n      //       window.location.reload();\r\n      //     }\r\n      //   }\r\n      // )\r\n      ();\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"키 확인\" />\r\n      <PageBody>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={1}></Grid>\r\n          <Grid\r\n            item\r\n            xs={4}\r\n            style={{\r\n              marginTop: \"100px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                border: \"1px solid #6799FF\",\r\n                borderRadius: \"30px\",\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n                display: \"flex \",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <CheckCreateRSAKey handleCreateRSAKey={handleCreateRSAKey} />\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid\r\n            item\r\n            xs={4}\r\n            style={{\r\n              marginTop: \"100px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                border: \"1px solid #6799FF\",\r\n                borderRadius: \"30px\",\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n                display: \"flex \",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <CheckCreateSymmetricKey\r\n                handleCreateSymmetricKey={handleCreateSymmetricKey}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={1}></Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              marginTop: \"100px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Grid\r\n              container\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100px\",\r\n                border: \"1px solid #42A2EA\",\r\n                width: \"25vw\",\r\n                borderRadius: \"30px\",\r\n              }}\r\n            >\r\n              <Grid item xs={6} style={{ marginRight: \"30px\" }}>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"standard\"\r\n                  placeholder=\"대칭키를 입력하세요\"\r\n                  onBlur={handleInput}\r\n                  defaultValue={input}\r\n                ></TextField>\r\n              </Grid>\r\n              <Grid item>\r\n                <CheckCreateInputSymmetricKey\r\n                  handleCreateInputSymmetricKey={handleCreateInputSymmetricKey}\r\n                  input={input}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CreateKey;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckSymmetricKeyDialog.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckRSAKeyDialog.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\doubleCheckInputSymmetricKeyDialog.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateSymmetricKey.js",["275","276","277","278","279","280","281","282","283"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  InputAdornment,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport DoubleCheckSymmetricKeyDialog from \"./doubleCheckSymmetricKeyDialog\";\r\nconst CheckCreateSymmetricKey = ({ handleCreateSymmetricKey }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [secondOpen, setSecondOpen] = useState(false);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleClickSecondOpen = () => {\r\n    setSecondOpen(true);\r\n  };\r\n  const handleClickSecondClose = () => {\r\n    setSecondOpen(false);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Grid>\r\n        <Button\r\n          style={{\r\n            height: \"50vh\",\r\n            width: \"30vw\",\r\n            borderRadius: \"30px\",\r\n            display: \"flex \",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontSize: \"3vw\",\r\n            fontWeight: \"bold\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={handleOpen}\r\n        >\r\n          대칭키 생성\r\n        </Button>\r\n        <Dialog open={open} onClose={handleClose}>\r\n          <DialogTitle>난수 대칭키 생성</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>대칭키를 새로 생성하겠습니까?</DialogContentText>\r\n            <DoubleCheckSymmetricKeyDialog\r\n              secondOpen={secondOpen}\r\n              handleClickSecondOpen={handleClickSecondOpen}\r\n              handleClickSecondClose={handleClickSecondClose}\r\n              handleCreateSymmetricKey={handleCreateSymmetricKey}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              style={{\r\n                background: \"#F32222\",\r\n                color: \"white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              onClick={handleClose}\r\n            >\r\n              거절\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                background: \"#37A3F3\",\r\n                color: \"white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              onClick={handleClickSecondOpen}\r\n              autoFocus\r\n            >\r\n              동의\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CheckCreateSymmetricKey;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\logSearch.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\decryption.js",["284","285"],"import React from \"react\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport LogSearch from \"./logSearch\";\r\nimport PathSetting from \"./pathSetting\";\r\nimport axios from \"axios\";\r\nimport api from \"../../url/baseUrl\";\r\n\r\nconst Decryption = () => {\r\n  const [year, setYear] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [day, setDay] = useState(\"\");\r\n  const [yearList, setYearList] = useState([]);\r\n  const [monthList, setMonthList] = useState([]);\r\n  const [dayList, setDayList] = useState([]);\r\n  const [requestLog, setRequestLog] = useState(\"\");\r\n  const [rows, setRows] = useState([]);\r\n  const [directoryPath, setDirectoryPath] = useState();\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    api.get(\"log/dir\", {}).then((res) => {\r\n      setYearList(res.data.directory);\r\n    });\r\n\r\n    api.get(\"log/path\", {}).then((res) => {\r\n      setDirectoryPath(res.data.logPath);\r\n    });\r\n  }, []);\r\n\r\n  const pathSettinngHandleClick = (e) => {\r\n    api\r\n      .put(\"log/path\", {\r\n        logPath: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDirectoryPath(inputRef.current.value);\r\n\r\n        api.get(\"log/dir\", {}).then((res) => {\r\n          setYearList(res.data.directory);\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const contentRequest = (e) => {\r\n    api.get(`log/EN/dir/${year}/${month}/${day}`, {}).then((res) => {\r\n      setRows(res.data.log);\r\n    });\r\n  };\r\n\r\n  const onChangeRequestLog = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"year\") {\r\n      setYear((year) => value);\r\n      api.get(`log/dir/${value}`, {}).then((res) => {\r\n        setMonthList(res.data.directory);\r\n      });\r\n    }\r\n\r\n    if (name === \"month\") {\r\n      setMonth((month) => value);\r\n      api.get(`log/dir/${year}/${value}`, {}).then((res) => {\r\n        setDayList(res.data.directory);\r\n      });\r\n    }\r\n\r\n    if (name === \"day\") {\r\n      setDay((day) => value);\r\n    }\r\n    setRequestLog((requestLog) => ({ ...requestLog, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"로그 복호화\" />\r\n      <PageBody>\r\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\r\n          <Grid item xs={6}>\r\n            <LogSearch\r\n              year={year}\r\n              month={month}\r\n              day={day}\r\n              yearList={yearList}\r\n              monthList={monthList}\r\n              dayList={dayList}\r\n              onChangeRequestLog={onChangeRequestLog}\r\n              contentRequest={contentRequest}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <PathSetting\r\n              pathSettinngHandleClick={pathSettinngHandleClick}\r\n              inputRef={inputRef}\r\n              setDirectoryPath={setDirectoryPath}\r\n              directoryPath={directoryPath}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <div style={{ marginTop: \"50px\" }}>\r\n              <Grid container spacing={3}>\r\n                <TableContainer\r\n                  component={Paper}\r\n                  style={{ background: \"#B2CCFF\", borderRadius: \"20px\" }}\r\n                >\r\n                  <Table>\r\n                    <TableHead style={{ background: \"#6799FF\" }}>\r\n                      <TableRow>\r\n                        <TableCell\r\n                          align=\"center\"\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"19px\",\r\n                          }}\r\n                        >\r\n                          대칭키\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"center\"\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"19px\",\r\n                            overflow: \"hidden\",\r\n                          }}\r\n                        >\r\n                          암/복호화 데이터\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"center\"\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"19px\",\r\n                            overflow: \"hidden\",\r\n                          }}\r\n                        >\r\n                          날짜\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"center\"\r\n                          style={{\r\n                            color: \"white\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"19px\",\r\n                            overflow: \"hidden\",\r\n                          }}\r\n                        >\r\n                          서버\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n\r\n                    {rows !== null ? (\r\n                      <TableBody style={{}}>\r\n                        {rows.map((row, index) => {\r\n                          return (\r\n                            <TableRow hover key={index}>\r\n                              <TableCell\r\n                                align=\"center\"\r\n                                style={{\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"15px\",\r\n                                  width: \"200px\",\r\n                                }}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    display: \"inline-block\",\r\n                                    maxWidth: \"350px\",\r\n                                    whiteSpace: \"nowrap\",\r\n                                    overflow: \"hidden\",\r\n                                    textOverflow: \"ellipsis\",\r\n                                  }}\r\n                                >\r\n                                  {row.symmetricKey}\r\n                                </div>\r\n                              </TableCell>\r\n                              <TableCell\r\n                                align=\"center\"\r\n                                style={{ fontWeight: \"bold\", fontSize: \"15px\" }}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    display: \"inline-block\",\r\n                                    maxWidth: \"280px\",\r\n                                    whiteSpace: \"nowrap\",\r\n                                    overflow: \"hidden\",\r\n                                    textOverflow: \"ellipsis\",\r\n                                  }}\r\n                                >\r\n                                  {row.title}\r\n                                </div>\r\n                              </TableCell>\r\n                              <TableCell\r\n                                align=\"center\"\r\n                                style={{ fontWeight: \"bold\", fontSize: \"15px\" }}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    display: \"inline-block\",\r\n                                    maxWidth: \"280px\",\r\n                                    whiteSpace: \"nowrap\",\r\n                                    overflow: \"hidden\",\r\n                                    textOverflow: \"ellipsis\",\r\n                                  }}\r\n                                >\r\n                                  {row.recordDate}\r\n                                </div>\r\n                              </TableCell>\r\n                              <TableCell\r\n                                align=\"center\"\r\n                                style={{ fontWeight: \"bold\", fontSize: \"15px\" }}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    display: \"inline-block\",\r\n                                    maxWidth: \"280px\",\r\n                                    whiteSpace: \"nowrap\",\r\n                                    overflow: \"hidden\",\r\n                                    textOverflow: \"ellipsis\",\r\n                                  }}\r\n                                >\r\n                                  {row.authorInfo}\r\n                                </div>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                      </TableBody>\r\n                    ) : null}\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Decryption;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateRSAKey.js",["286","287","288","289","290","291","292","293","294"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  InputAdornment,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport DoubleCheckCreateRSAKeyDialog from \"./doubleCheckRSAKeyDialog\";\r\n\r\nconst CheckCreateRSAKey = ({ handleCreateRSAKey }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [secondOpen, setSecondOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleClickSecondOpen = () => {\r\n    setSecondOpen(true);\r\n  };\r\n  const handleClickSecondClose = () => {\r\n    setSecondOpen(false);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Grid>\r\n        <Button\r\n          style={{\r\n            height: \"50vh\",\r\n            width: \"30vw\",\r\n            borderRadius: \"30px\",\r\n            display: \"flex \",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontSize: \"3vw\",\r\n            fontWeight: \"bold\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={handleOpen}\r\n        >\r\n          공개키 생성\r\n        </Button>\r\n        <Dialog open={open} onClose={handleClose}>\r\n          <DialogTitle>난수 공개키, 개인키 생성</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              공개키, 개인키를 새로 생성하겠습니까?\r\n            </DialogContentText>\r\n            <DoubleCheckCreateRSAKeyDialog\r\n              secondOpen={secondOpen}\r\n              handleClickSecondOpen={handleClickSecondOpen}\r\n              handleClickSecondClose={handleClickSecondClose}\r\n              handleCreateRSAKey={handleCreateRSAKey}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              style={{\r\n                background: \"#F32222\",\r\n                color: \"white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              onClick={handleClose}\r\n            >\r\n              거절\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                background: \"#37A3F3\",\r\n                color: \"white\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n              onClick={handleClickSecondOpen}\r\n              autoFocus\r\n            >\r\n              동의\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CheckCreateRSAKey;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Log\\pathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkCreateInputSymmetricKey.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manualPage.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\constatant.js",["295"],"const path = `${process.env.PUBLIC_URL}` + \"/manual/\";\r\n\r\nconst contentPage0 = [\r\n  {\r\n    title: \"실시간 감지 API 지정\",\r\n  },\r\n];\r\n\r\nconst contentPage1 = [\r\n  {\r\n    title: \"설명\",\r\n    body: `테이블 명 : DB의 테이블 명을 적는것을 권장, 최종 파일명이 되며, 중복으로는 입력 불가. \r\n    \\n전체 데이터API 주소 : CSV 파일의 첫 구조를 생성.\r\n    \\n수정감지 API 주소 : 실시간으로 감지할 API 주소 입력, 해당 API 내 내용의 변화를 감지하여 CSV파일에 추가.`,\r\n    img: path + \"1/API_Create_1.PNG\",\r\n  },\r\n];\r\n\r\nconst contentPage2 = [\r\n  {\r\n    title: \"예제\",\r\n    body: `테이블 명 : \"USER\"\r\n전체 데이터API 주소 : \"https://jsonplaceholder.typicode.com/users\".\r\n수정감지 API 주소 : https://jsonplaceholder.typicode.com/users.\r\n\\n테이블 명 : \"USER\"\r\n전체 데이터API 주소 : \"https://jsonplaceholder.typicode.com/comments\".\r\n수정감지 API 주소 : https://jsonplaceholder.typicode.com/comments.`,\r\n    img: path + \"1/API_Create_2.PNG\",\r\n  },\r\n];\r\n\r\nconst contentPage3 = [\r\n  {\r\n    title: \"실시간 암호화\",\r\n  },\r\n];\r\n\r\nconst contentPage4 = [\r\n  {\r\n    title: \"실시간 암호화 시작\",\r\n    body: `API 주소를 설정한 다음. \"좌측 데이터 암호화-실시간 동작\" 클릭, \r\n파란색 \"실시간 암호화 진행\" 버튼 클릭`,\r\n    img: path + \"2/liveStart.PNG\",\r\n  },\r\n];\r\nconst contentPage5 = [\r\n  {\r\n    title: \"실시간 암호화 중지\",\r\n    body: `API 주소를 수정하거나, 실시간 암호화를 중지시키고 싶다면\r\n빨간색 \"중지\" 버튼 클릭, 잠시후 현재까지 진행된 내용 자동 다운로드`,\r\n    img: path + \"2/liveStop.PNG\",\r\n  },\r\n];\r\nconst contentPage6 = [\r\n  {\r\n    title: \"사용언어에 따른 API 생성 가이드\",\r\n  },\r\n];\r\nconst contentPage7 = [\r\n  {\r\n    title: \"(자바)\",\r\n    body: `1. JDBC 를 이용한 DB 연결(ORM 사용 가능)`,\r\n    img: path + \"3/API_JAVA_Create_1.png\",\r\n  },\r\n  {\r\n    body: `2. SELECT 쿼리를 이용한 테이블 조회(암호화 위치지정)`,\r\n    img: path + \"3/API_JAVA_Create_2.png\",\r\n  },\r\n  {\r\n    body: `3. Result Set Data => JSON 형식으로 변경`,\r\n    img: path + \"3/API_JAVA_Create_3.png\",\r\n  },\r\n  {\r\n    body: `4. JSON 데이터 반환`,\r\n    img: path + \"3/API_JAVA_Create_4.png\",\r\n  },\r\n  {\r\n    body: `5. API 생성`,\r\n    img: path + \"3/API_JAVA_Create_5.png\",\r\n  },\r\n  {\r\n    body: `6. 생성된 API`,\r\n    img: path + \"3/JAVA_JSONDATA.png\",\r\n  },\r\n];\r\n\r\nconst contentPage8 = [\r\n  {\r\n    title: \"(파이썬)\",\r\n    body: `1. pymysql, jdbc 등 데이터베이스 연결\r\n2. SELECT 쿼리를 이용한 테이블 조회\r\n3. KEY, VALUE 형태의 JSON으로 변경\r\n4. API 생성`,\r\n    img: path + \"3/API_Python_Create_1.png\",\r\n  },\r\n];\r\n\r\nexport {\r\n  contentPage0,\r\n  contentPage1,\r\n  contentPage2,\r\n  contentPage3,\r\n  contentPage4,\r\n  contentPage5,\r\n  contentPage6,\r\n  contentPage7,\r\n  contentPage8,\r\n};\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manualContent.js",["296"],"import { Grid, Box, Typography, Tab, Tabs } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ManualPage from \"./manualPage\";\r\nimport LooksOneIcon from \"@mui/icons-material/LooksOne\";\r\nimport LooksTwoIcon from \"@mui/icons-material/LooksTwo\";\r\nimport Looks3Icon from \"@mui/icons-material/Looks3\";\r\nimport Looks4Icon from \"@mui/icons-material/Looks4\";\r\nimport {\r\n  contentPage0,\r\n  contentPage1,\r\n  contentPage2,\r\n  contentPage3,\r\n  contentPage4,\r\n  contentPage5,\r\n  contentPage6,\r\n  contentPage7,\r\n  contentPage8,\r\n} from \"./constatant\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography component={\"span\"}>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst ManualContent = () => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (e, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const style = {\r\n    minWidth: \"40px\",\r\n    width: \"40px\",\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box>\r\n        <Tabs value={value} onChange={handleChange}>\r\n          <Tab icon={<LooksOneIcon />} styel={style} />\r\n          <Tab icon={<LooksTwoIcon />} styel={style} />\r\n          <Tab icon={<Looks3Icon />} styel={style} />\r\n        </Tabs>\r\n      </Box>\r\n      <TabPanel value={value} index={0}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <ManualPage contentPage={contentPage0} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage1} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage2} />\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <ManualPage contentPage={contentPage3} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage4} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage5} />\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <ManualPage contentPage={contentPage6} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage7} />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <ManualPage contentPage={contentPage8} />\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n    </Box>\r\n  );\r\n};\r\nexport default ManualContent;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\manual.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\jsonLive.js",["297","298"],"import React from \"react\";\nimport { Grid, Box, Button } from \"@material-ui/core\";\nimport { PageBody, PageHeader } from \"../../components\";\nimport { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport PathSetting from \"./excelPathSetting\";\nimport api from \"../../url/baseUrl\";\nimport dayjs from \"dayjs\";\n\nconst JsonLive = () => {\n  const [running, setRunning] = useState(false);\n\n  const [currentTime, setCurrentTime] = useState(\"0:0:0\");\n  const [standardTime, setStandardTime] = useState();\n  const interval = useRef(null);\n  const tileLabel = [\"Hours\", \"Mins\", \"Secs\"];\n  const inputRef = useRef(null);\n  const [directoryPath, setDirectoryPath] = useState();\n\n  const pathSettinngHandleClick = (e) => {\n    setDirectoryPath(inputRef.current.value);\n\n    api.post(\"api/path\", {\n      downloadPath: inputRef.current.value,\n    });\n  };\n\n  useEffect(() => {\n    api.get(\"stateLive\", {}).then((res) => {\n\n      if (res.data.running) {\n        setStandardTime((standardTime) => dayjs(new Date(res.data.startTime)));\n        setRunning(res.data.running);\n      } else {\n        setRunning(res.data.running);\n      }\n    });\n\n    api.get(\"api/path\", {}).then((res) => {\n      setDirectoryPath(res.data.downloadPath);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!running) {\n      clearInterval(interval.current);\n      setCurrentTime(\"00:00:00\");\n    } else {\n      if (standardTime !== undefined) {\n        interval.current = setInterval(currentDate, 1000);\n        return () => clearInterval(interval.current);\n      }\n    }\n  }, [running]);\n\n  const currentDate = () => {\n    const date = dayjs(new Date());\n\n    date.format(\"YYYY.MM.DD HH:mm:ss\");\n\n    const hours = date.diff(standardTime, \"hour\");\n    const minutes = date.diff(standardTime, \"minute\") % 60;\n    const seconds = date.diff(standardTime, \"second\") % 60;\n\n    setCurrentTime(`${hours}:${minutes}:${seconds}`);\n  };\n\n  const onClick = () => {\n    if (running) {\n      setRunning(false);\n      /* 초기화*/\n      api\n        .post(\"startLive\", {\n          running: false,\n          startTime: \"00:00:00\",\n        })\n        .then((res) => {\n  \n        })\n        .catch((err) => console.log(err));\n    } else {\n      /* 시작 상태 전달 */\n      setRunning(true);\n      setStandardTime((standardTime) => new Date());\n      const nowTime = new Date();\n\n      api\n        .post(\"startLive\", {\n          running: true,\n          startTime: String(\n            `${nowTime.getFullYear()}-${\n              nowTime.getMonth() + 1\n            }-${nowTime.getDate()} ${nowTime.getHours()}:${nowTime.getMinutes()}:${nowTime.getSeconds()}`\n          ),\n        })\n        .then((res) => {\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <PageHeader title=\"JSON 실시간 동작\" />\n      <PageBody>\n        <div\n          style={{\n            height: \"100px\",\n          }}\n        ></div>\n        <PathSetting\n          pathSettinngHandleClick={pathSettinngHandleClick}\n          inputRef={inputRef}\n          setDirectoryPath={setDirectoryPath}\n          directoryPath={directoryPath}\n        ></PathSetting>\n        <Grid\n          container\n          spacing={3}\n          style={{\n            background: \"#4C4C4C\",\n          }}\n        >\n          <Grid item xs={12}>\n            <Box align=\"center\">\n              {running ? (\n                <span\n                  style={{\n                    fontSize: \"50px\",\n                    borderRadius: \"20px\",\n                    color: \"#D5D5D5\",\n                  }}\n                >\n                  Enable encryption...\n                </span>\n              ) : (\n                <span\n                  style={{\n                    fontSize: \"50px\",\n                    borderRadius: \"20px\",\n                    color: \"#D5D5D5\",\n                  }}\n                >\n                  Disable encryption...\n                </span>\n              )}\n            </Box>\n          </Grid>\n          <Grid container spaacing={2}>\n            <Grid item xs={12}>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignitem: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {currentTime.split(\":\").map((time, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                      width: \"200px\",\n                      height: \"200px\",\n                      background: \"#177FF0\",\n                      borderRadius: \"20px\",\n                      margin: \"20px\",\n                    }}\n                  >\n                    <span\n                      style={{\n                        color: \"#C0C0C0\",\n                        fontSize: \"80px\",\n                      }}\n                    >\n                      {time}\n                    </span>\n                    <span\n                      style={{\n                        color: \"white\",\n                        fontSize: \"40px\",\n                      }}\n                    >\n                      {tileLabel[index]}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} align=\"center\">\n            {running ? (\n              <Button\n                style={{\n                  fontSize: 20,\n                  background: \"#F15F5F\",\n                  color: \"white\",\n                }}\n                size=\"large\"\n                variant=\"contained\"\n                onClick={onClick}\n              >\n                중지\n              </Button>\n            ) : (\n              <Button\n                style={{\n                  fontSize: 20,\n                  background: \"#4141CC\",\n                  color: \"white\",\n                }}\n                size=\"large\"\n                variant=\"contained\"\n                onClick={onClick}\n              >\n                실시간 암호화 진행\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </PageBody>\n    </React.Fragment>\n  );\n};\n\nexport default JsonLive;\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\filePathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Key\\checkKey.js",["299","300"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport api from \"../../url/baseUrl\";\r\n\r\nconst CheckKey = () => {\r\n  const [symmetricKey, setSymmetricKey] = useState(false);\r\n  const [publicKey, setPublicKey] = useState(false);\r\n  const [privateKey, setPrivateKey] = useState(false);\r\n  const [keyInfo, setKeyInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.get(\"key-check\", {}).then((res) => {\r\n      setKeyInfo((keyInfo) => res.data.data);\r\n    });\r\n  }, []);\r\n\r\n  const changeStar = (key) => {\r\n    let last = key.substr(key.length, key.length - 1);\r\n    let star = \"\";\r\n    for (let i = 0; i < key.length - 3; i++) {\r\n      star += \"*\";\r\n    }\r\n    return star + last;\r\n  };\r\n\r\n  const onClick = (keyType) => {\r\n    if (\"대칭키\" === keyType) {\r\n      setSymmetricKey(() => !symmetricKey);\r\n    } else if (\"공개키\" === keyType) {\r\n      setPublicKey(() => !publicKey);\r\n    } else if (\"비밀키\" === keyType) {\r\n      setPrivateKey(() => !privateKey);\r\n    }\r\n  };\r\n\r\n  const doCopy = (e) => {\r\n    const content = e.target.innerHTML;\r\n\r\n    navigator.clipboard.writeText(content).then(() => {\r\n      alert(\"복사되었습니다.\");\r\n    });\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"키 확인\" />\r\n      <PageBody>\r\n        {keyInfo != null ? (\r\n          <Grid container spacing={2} justifyContent=\"center\">\r\n            {keyInfo.map((keys, index) => (\r\n              <Grid item xs={11} key={index}>\r\n                <Card\r\n                  style={{\r\n                    background: \"#6799FF\",\r\n                    border: \"1px solid white\",\r\n                    borderRadius: \"20px\",\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <Grid\r\n                      container\r\n                      spacing={4}\r\n                      direction=\"row\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item xs={12}>\r\n                        <Grid\r\n                          container\r\n                          spacing={3}\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Grid item>\r\n                            <Typography variant=\"h4\">{keys.keyType}</Typography>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <IconButton onClick={() => onClick(keys.keyType)}>\r\n                              {keys.keyType === \"대칭키\" ? (\r\n                                symmetricKey ? (\r\n                                  <RemoveRedEyeIcon />\r\n                                ) : (\r\n                                  <VisibilityOffIcon />\r\n                                )\r\n                              ) : keys.keyType === \"비밀키\" ? (\r\n                                privateKey ? (\r\n                                  <RemoveRedEyeIcon />\r\n                                ) : (\r\n                                  <VisibilityOffIcon />\r\n                                )\r\n                              ) : keys.keyType === \"공개키\" ? (\r\n                                publicKey ? (\r\n                                  <RemoveRedEyeIcon />\r\n                                ) : (\r\n                                  <VisibilityOffIcon />\r\n                                )\r\n                              ) : null}\r\n                            </IconButton>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item xs={12} style={{ marginBottom: \"20px\" }}>\r\n                        <Grid\r\n                          container\r\n                          spacing={3}\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{\r\n                              marginLeft: \"20px\",\r\n                              borderTop: \"1px solid white\",\r\n                              borderLeft: \"1px solid white\",\r\n                              borderBottom: \"1px solid white\",\r\n                            }}\r\n                          >\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  textAlign: \"center\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"1.2vw\",\r\n                                }}\r\n                              >\r\n                                키 생성일\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"#DCE3F4\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"0.9vw\",\r\n                                }}\r\n                              >\r\n                                {keys.createdDate}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ border: \"1px solid white\" }}\r\n                          >\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  textAlign: \"center\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"1.2vw\",\r\n                                }}\r\n                              >\r\n                                키 만료일\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  color: \"#DCE3F4\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"0.9vw\",\r\n                                }}\r\n                              >\r\n                                {keys.expirationDate}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{\r\n                              borderTop: \"1px solid white\",\r\n                              borderRight: \"1px solid white\",\r\n                              borderBottom: \"1px solid white\",\r\n                            }}\r\n                          >\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  textAlign: \"center\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"1.2vw\",\r\n                                }}\r\n                              >\r\n                                키 유효기간\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography\r\n                                style={{\r\n                                  textAlign: \"center\",\r\n                                  color: \"#DCE3F4\",\r\n                                  fontWeight: \"bold\",\r\n                                  fontSize: \"0.9vw\",\r\n                                }}\r\n                              >\r\n                                {keys.validTerm}\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <Grid\r\n                          container\r\n                          spacing={3}\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Grid item>\r\n                            <Typography variant=\"h5\">키</Typography>\r\n                          </Grid>\r\n                          <Grid style={{ overflow: \"hidden\" }} item xs={11}>\r\n                            <Button\r\n                              onClick={doCopy}\r\n                              style={{\r\n                                color: \"white\",\r\n                                fontWeight: \"bold\",\r\n                                fontSize: \"15px\",\r\n                              }}\r\n                            >\r\n                              {keys.keyType === \"대칭키\"\r\n                                ? symmetricKey\r\n                                  ? keys.keyValue\r\n                                  : changeStar(keys.keyValue)\r\n                                : keys.keyType === \"비밀키\"\r\n                                ? privateKey\r\n                                  ? keys.keyValue\r\n                                  : changeStar(keys.keyValue)\r\n                                : keys.keyType === \"공개키\"\r\n                                ? publicKey\r\n                                  ? keys.keyValue\r\n                                  : changeStar(keys.keyValue)\r\n                                : null}\r\n                            </Button>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        ) : null}\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CheckKey;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\excelPathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\directoryPathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\databaseLive.js",["301","302","303"],"import React from \"react\";\nimport { Grid, Box, Button } from \"@material-ui/core\";\nimport { PageBody, PageHeader } from \"../../components\";\nimport { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport PathSetting from \"./excelPathSetting\";\nimport api from \"../../url/baseUrl\";\nimport dayjs from \"dayjs\";\n\nconst DatabaseLive = () => {\n  const [running, setRunning] = useState(false);\n  const [currentTime, setCurrentTime] = useState(\"0:0:0\");\n  const [standardTime, setStandardTime] = useState();\n  const interval = useRef(null);\n  const tileLabel = [\"Hours\", \"Mins\", \"Secs\"];\n  const inputRef = useRef(null);\n  const [directoryPath, setDirectoryPath] = useState();\n\n  const pathSettinngHandleClick = (e) => {\n    setDirectoryPath(inputRef.current.value);\n\n    api\n      .put(\"db-encrypt-file/path\", {\n        downloadPath: inputRef.current.value,\n      })\n      .then((res) => {})\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    api.get(\"stateLive/db\", {}).then((res) => {\n      if (res.data.running) {\n        setStandardTime((standardTime) => dayjs(new Date(res.data.startTime)));\n        setRunning(res.data.running);\n      } else {\n        setRunning(res.data.running);\n      }\n    });\n\n    api.get(\"db-encrypt-file/path\", {}).then((res) => {\n      setDirectoryPath(res.data.downloadPath);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!running) {\n      clearInterval(interval.current);\n      setCurrentTime(\"00:00:00\");\n    } else {\n      if (standardTime !== undefined) {\n        interval.current = setInterval(currentDate, 1000);\n        return () => clearInterval(interval.current);\n      }\n    }\n  }, [running]);\n\n  const currentDate = () => {\n    const date = dayjs(new Date());\n\n    const hours = date.diff(standardTime, \"hour\");\n    const minutes = date.diff(standardTime, \"minute\") % 60;\n    const seconds = date.diff(standardTime, \"second\") % 60;\n\n    setCurrentTime(`${hours}:${minutes}:${seconds}`);\n  };\n\n  const onClick = () => {\n    if (running) {\n      setRunning(false);\n      /* 초기화*/\n      api\n        .post(\"stopLive/db\", {})\n        .then((res) => {})\n        .catch((err) => console.log(err));\n    } else {\n      api\n        .post(\"startLive/db\", {})\n        .then((res) => {})\n        .catch((err) => console.log(err));\n\n      /* 시작 상태 전달 */\n      setRunning(true);\n      setStandardTime((standardTime) => new Date());\n      const nowTime = new Date();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <PageHeader title=\"DB 실시간 동작\" />\n      <PageBody>\n        <div\n          style={{\n            height: \"100px\",\n          }}\n        ></div>\n        <PathSetting\n          pathSettinngHandleClick={pathSettinngHandleClick}\n          inputRef={inputRef}\n          setDirectoryPath={setDirectoryPath}\n          directoryPath={directoryPath}\n        ></PathSetting>\n        <Grid\n          container\n          spacing={3}\n          style={{\n            background: \"#4C4C4C\",\n          }}\n        >\n          <Grid item xs={12}>\n            <Box align=\"center\">\n              {running ? (\n                <span\n                  style={{\n                    fontSize: \"50px\",\n                    borderRadius: \"20px\",\n                    color: \"#D5D5D5\",\n                  }}\n                >\n                  Enable encryption...\n                </span>\n              ) : (\n                <span\n                  style={{\n                    fontSize: \"50px\",\n                    borderRadius: \"20px\",\n                    color: \"#D5D5D5\",\n                  }}\n                >\n                  Disable encryption...\n                </span>\n              )}\n            </Box>\n          </Grid>\n          <Grid container spaacing={2}>\n            <Grid item xs={12}>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignitem: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {currentTime.split(\":\").map((time, index) => (\n                  <div\n                    key={index}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                      width: \"200px\",\n                      height: \"200px\",\n                      background: \"#177FF0\",\n                      borderRadius: \"20px\",\n                      margin: \"20px\",\n                    }}\n                  >\n                    <span\n                      style={{\n                        color: \"#C0C0C0\",\n                        fontSize: \"80px\",\n                      }}\n                    >\n                      {time}\n                    </span>\n                    <span\n                      style={{\n                        color: \"white\",\n                        fontSize: \"40px\",\n                      }}\n                    >\n                      {tileLabel[index]}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} align=\"center\">\n            {running ? (\n              <Button\n                style={{\n                  fontSize: 20,\n                  background: \"#F15F5F\",\n                  color: \"white\",\n                }}\n                size=\"large\"\n                variant=\"contained\"\n                onClick={onClick}\n              >\n                중지\n              </Button>\n            ) : (\n              <Button\n                style={{\n                  fontSize: 20,\n                  background: \"#4141CC\",\n                  color: \"white\",\n                }}\n                size=\"large\"\n                variant=\"contained\"\n                onClick={onClick}\n              >\n                실시간 암호화 진행\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </PageBody>\n    </React.Fragment>\n  );\n};\n\nexport default DatabaseLive;\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Json\\setting.js",["304","305","306","307","308"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Checkbox,\r\n  TableContainer,\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Table,\r\n  Paper,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Manual from \"./manual\";\r\nimport api from \"../../url/baseUrl\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nconst JsonApi = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const tableNameRef = useRef();\r\n  const apiAllListRef = useRef();\r\n  const [checkList, setCheckList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"api 리스트 요청\");\r\n    api.get(\"api/list\", {}).then((res) => {\r\n      console.log(res.data);\r\n      if (res.data.valid == undefined) {\r\n        setRows(res.data);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const onChangeSingleCheck = (e) => {\r\n    const { value, checked } = e.target;\r\n    console.log(checked);\r\n    let updateCheckList = [...checkList];\r\n    if (checked) {\r\n      updateCheckList = [...checkList, value];\r\n    } else {\r\n      updateCheckList.splice(checkList.indexOf(value), 1);\r\n    }\r\n    setCheckList(updateCheckList);\r\n  };\r\n\r\n  const onChangeAllCheck = (e) => {\r\n    const { value, checked } = e.target;\r\n    let list = [];\r\n    if (checked) {\r\n      rows.map((row, i) => (list[i] = String(i)));\r\n    }\r\n    console.log(list);\r\n    setCheckList(list);\r\n  };\r\n\r\n  const onClickApiAdd = () => {\r\n    let isDoubleCheck = false;\r\n\r\n    if (rows !== undefined) {\r\n      rows.map((row, index) =>\r\n        row.tableName === tableNameRef.current.value\r\n          ? (isDoubleCheck = true)\r\n          : (isDoubleCheck = false)\r\n      );\r\n    }\r\n\r\n    if (!isDoubleCheck) {\r\n      setRows([\r\n        ...rows,\r\n        {\r\n          tableName: tableNameRef.current.value,\r\n          api: apiAllListRef.current.value,\r\n          isValidation: false,\r\n        },\r\n      ]);\r\n    } else {\r\n      window.alert(\"테이블명 중복\");\r\n    }\r\n  };\r\n\r\n  const onClickApiDelete = () => {\r\n    let deleteApiList = [];\r\n    rows.map((row, index) =>\r\n      checkList.includes(String(index)) ? null : deleteApiList.push(row)\r\n    );\r\n\r\n    api\r\n      .post(\"api/add\", {\r\n        apiList: deleteApiList,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        setRows((rows) => res.data.apiList);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setCheckList([]);\r\n  };\r\n\r\n  const onClickApiSet = () => {\r\n    const apiList = [];\r\n    rows.map((row) => apiList.push(row));\r\n    api\r\n      .post(\"api/add\", {\r\n        apiList: apiList,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.apiList);\r\n        setRows((rows) => res.data.apiList);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"환경설정 - API 관리\" />\r\n      <PageBody>\r\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n          <div>\r\n            <Grid\r\n              item\r\n              xs={8}\r\n              style={{\r\n                margin: \"auto\",\r\n                marginTop: \"50px\",\r\n                minWidth: \"1100px\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Manual />\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              style={{\r\n                margin: \"auto\",\r\n                marginTop: \"20px\",\r\n                marginBottom: \"100px\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                xs={8}\r\n                style={{\r\n                  minHeight: \"120px\",\r\n                  minWidth: \"1100px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  borderRadius: \"20px\",\r\n                  border: \"2px solid #6799FF\",\r\n                }}\r\n              >\r\n                <Grid item style={{ marginRight: \"20px\" }}>\r\n                  <Typography\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                  >\r\n                    테이블명\r\n                  </Typography>\r\n                  <TextField\r\n                    style={{ width: \"120px\" }}\r\n                    placeholder=\"입력\"\r\n                    inputRef={tableNameRef}\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  style={{\r\n                    marginRight: \"20px\",\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                  >\r\n                    API 주소\r\n                  </Typography>\r\n                  <TextField\r\n                    style={{\r\n                      width: \"230px\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                    variant=\"standard\"\r\n                    placeholder=\"입력\"\r\n                    inputRef={apiAllListRef}\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid item style={{ marginRight: \"20px\" }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={onClickApiAdd}\r\n                    style={{\r\n                      background: \"#6799FF\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    API 추가\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginRight: \"20px\" }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={onClickApiDelete}\r\n                    style={{\r\n                      background: \"#6799FF\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    API 삭제\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={onClickApiSet}\r\n                    style={{\r\n                      background: \"#4374D9\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    API 설정\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3} justifyContent=\"center\">\r\n              <Grid item xs={8}>\r\n                <TableContainer component={Paper}>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>\r\n                          {rows !== undefined ? (\r\n                            <Checkbox\r\n                              checked={rows.length === checkList.length}\r\n                              onChange={onChangeAllCheck}\r\n                            ></Checkbox>\r\n                          ) : null}\r\n                        </TableCell>\r\n                        <TableCell>테이블이름</TableCell>\r\n                        <TableCell>API 주소</TableCell>\r\n                        <TableCell>사용 가능 여부</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n\r\n                    {rows !== undefined ? (\r\n                      <TableBody>\r\n                        {rows.map((row, index) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              key={index}\r\n                              sx={{\r\n                                \"&:last-child td, &:last-child th\": {\r\n                                  border: 1,\r\n                                },\r\n                              }}\r\n                            >\r\n                              <TableCell>\r\n                                <Checkbox\r\n                                  value={index}\r\n                                  onChange={onChangeSingleCheck}\r\n                                  checked={checkList.includes(String(index))}\r\n                                ></Checkbox>\r\n                              </TableCell>\r\n                              <TableCell>{row.tableName}</TableCell>\r\n                              <TableCell>{row.api}</TableCell>\r\n                              <TableCell style={{ paddingLeft: \"50px\" }}>\r\n                                {row.isValidation ? (\r\n                                  <CheckIcon color=\"success\" />\r\n                                ) : (\r\n                                  <CloseIcon color=\"error\" />\r\n                                )}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                      </TableBody>\r\n                    ) : null}\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default JsonApi;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\stringEncryption.js",["309"],"import React from \"react\";\r\nimport { Grid, Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport { useRef, useState } from \"react\";\r\nimport api from \"../../url/baseUrl\";\r\nconst StringEncryption = () => {\r\n  const [stringData, setStingData] = useState(\"\");\r\n  const [encryptionString, setEncryptionString] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  function handleClick() {\r\n    setStingData(inputRef.current.value);\r\n    /* 문자열 암호화 API */\r\n    api\r\n      .post(\"encrypt-direct\", {\r\n        plainText: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setEncryptionString(res.data.cipherText);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"문자열 암호화\" />\r\n      <PageBody>\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n          }}\r\n        ></div>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n          <Grid item xs={6}>\r\n            <div\r\n              style={{\r\n                background: \"#177FF0\",\r\n                border: \"solid 1px #D5D5D5\",\r\n                borderRadius: \"20px\",\r\n                height: \"250px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontSize: \"30px\",\r\n                    }}\r\n                  >\r\n                    평문\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                  <TextField\r\n                    fullWidth\r\n                    display=\"flex\"\r\n                    type=\"text\"\r\n                    multiline\r\n                    variant=\"standard\"\r\n                    inputRef={inputRef}\r\n                    minRows={4}\r\n                    style={{\r\n                      background: \"white\",\r\n                      border: \"1px solid gray\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    inputProps={{\r\n                      style: {\r\n                        textAlign: \"center\",\r\n                        fontSize: 13,\r\n                        color: \"black\",\r\n                      },\r\n                    }} // font size of input text\r\n                    placeholder=\"평문\"\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              onClick={handleClick}\r\n              size=\"large\"\r\n              style={{\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              암호화 실행\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <div\r\n              style={{\r\n                background: \"#6799FF\",\r\n                border: \"solid 1px #D5D5D5\",\r\n                borderRadius: \"20px\",\r\n                height: \"250px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    align=\"center\"\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontSize: \"30px\",\r\n                    }}\r\n                  >\r\n                    암호문\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                  <TextField\r\n                    fullWidth\r\n                    display=\"flex\"\r\n                    type=\"text\"\r\n                    multiline\r\n                    minRows={3}\r\n                    value={encryptionString}\r\n                    style={{\r\n                      background: \"white\",\r\n                      border: \"1px solid gray\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    inputProps={{\r\n                      style: {\r\n                        textAlign: \"center\",\r\n                        fontSize: 13,\r\n                        color: \"black\",\r\n                      },\r\n                    }} // font size of input text\r\n                    placeholder=\"암호문\"\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default StringEncryption;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\progressbar.js",["310","311"],"import React, { useState } from \"react\";\r\nimport { Box, Modal } from \"@material-ui/core\";\r\nimport { CircularProgress, Fade } from \"@mui/material\";\r\n\r\nconst Progressbar = ({ open }) => {\r\n  return (\r\n    <Modal open={open}>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Progressbar;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\fileEncryption.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\routes.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\filePathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Encryption\\directoryEncryption.js",["312","313","314","315"],"import React, { useEffect } from \"react\";\r\nimport { Box, Grid, Button } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport { useState, useRef } from \"react\";\r\nimport api from \"../../url/baseUrl\";\r\nimport PathSetting from \"./filePathSetting\";\r\nimport DirectoryPathSetting from \"./directoryPathSetting\";\r\n\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport ErrorIcon from \"@mui/icons-material/Error\";\r\nimport Progressbar from \"./progressbar\";\r\n\r\nconst Posts = () => {\r\n  const inputRef = useRef(null);\r\n  const encryptionDirectoryPathRef = useRef(null);\r\n  const [enDirectoryPath, setEnDirectoryPath] = useState();\r\n  const [directoryPath, setDirectoryPath] = useState();\r\n  const [isEncryption, setIsEncryption] = useState(false);\r\n  const [directoryList, setDirectoryList] = useState();\r\n  const [enDirectoryList, setEnDirectoryList] = useState();\r\n  const [returnDirectoryList, setReturnDirectoryList] = useState();\r\n\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    api.get(\"encrypt-file/path\", {}).then((res) => {\r\n      setDirectoryPath(res.data.body.encryptedFilePath);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEncryption) {\r\n      console.log(enDirectoryList);\r\n      setIsEncryption((isEncryption) => false);\r\n\r\n      api\r\n        .post(\"encrypt-multiple-file/run\", {\r\n          data: enDirectoryList,\r\n        })\r\n        .then((res) => {\r\n          //res.data 데이터 설정\r\n          setReturnDirectoryList((returnDirectoryList) => res.data.body.data);\r\n          console.log(res.data.body.data);\r\n\r\n          setOpen((prev) => !prev);\r\n        })\r\n        .catch((err) => {\r\n          setOpen((prev) => !prev);\r\n        });\r\n    }\r\n  }, [isEncryption]);\r\n\r\n  const pathSettinngHandleClick = (e) => {\r\n    api\r\n      .post(\"encrypt-file/path\", {\r\n        encryptedFilePath: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDirectoryPath(inputRef.current.value);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const EnPathSettinngHandleClick = (e) => {\r\n    api\r\n      .post(\"encrypt-multiple-file/path\", {\r\n        path: encryptionDirectoryPathRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.dirList);\r\n        setEnDirectoryPath(encryptionDirectoryPathRef.current.value);\r\n        setDirectoryList(res.data.dirList);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const handleClickEncryption = (e) => {\r\n    setOpen((prev) => !prev);\r\n    setEnDirectoryList([]);\r\n    setIsEncryption((isEncryption) => true);\r\n    for (let i = 0; i < checked.length; i++) {\r\n      setEnDirectoryList((enDirectoryList) => [\r\n        ...enDirectoryList,\r\n        {\r\n          index: checked[i],\r\n          fileName: enDirectoryPath + `/` + directoryList[checked[i]].fileName,\r\n        },\r\n      ]);\r\n\r\n      setChecked([]);\r\n    }\r\n  };\r\n\r\n  const handleToggle = (index) => () => {\r\n    const currentIndex = checked.indexOf(index);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(index);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"폴더 암호화\" />\r\n      <PageBody>\r\n        <div\r\n          style={{\r\n            height: \"100px\",\r\n          }}\r\n        ></div>\r\n        <PathSetting\r\n          pathSettinngHandleClick={pathSettinngHandleClick}\r\n          inputRef={inputRef}\r\n          directoryPath={directoryPath}\r\n        ></PathSetting>\r\n        <DirectoryPathSetting\r\n          EnPathSettinngHandleClick={EnPathSettinngHandleClick}\r\n          encryptionDirectoryPathRef={encryptionDirectoryPathRef}\r\n          enDirectoryPath={enDirectoryPath}\r\n        ></DirectoryPathSetting>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={8} align=\"center\">\r\n            <Box style={{ backgroundColor: \"#177FF0\", maxWidth: \"700px\" }}>\r\n              {directoryList != undefined ? (\r\n                <List\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    maxWidth: 600,\r\n                    bgcolor: \"background.paper\",\r\n                  }}\r\n                >\r\n                  {directoryList.map((list, index) => {\r\n                    const labelId = `checkbox-list-label-${index}`;\r\n\r\n                    return (\r\n                      <ListItem\r\n                        key={index}\r\n                        secondaryAction={\r\n                          returnDirectoryList != null\r\n                            ? returnDirectoryList.map((lists, i) =>\r\n                                lists.index == index ? (\r\n                                  lists.success == true ? (\r\n                                    <CheckCircleIcon key={i} color=\"success\" />\r\n                                  ) : (\r\n                                    <ErrorIcon key={i} color=\"disabled\" />\r\n                                  )\r\n                                ) : null\r\n                              )\r\n                            : null\r\n                        }\r\n                        disablePadding\r\n                      >\r\n                        <ListItemButton\r\n                          role={undefined}\r\n                          onClick={handleToggle(index)}\r\n                          dense\r\n                        >\r\n                          <ListItemIcon>\r\n                            <Checkbox\r\n                              edge=\"start\"\r\n                              checked={checked.indexOf(index) !== -1}\r\n                              tabIndex={-1}\r\n                              disableRipple\r\n                              inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                          </ListItemIcon>\r\n                          <ListItemText id={labelId} primary={list.fileName} />\r\n                        </ListItemButton>\r\n                      </ListItem>\r\n                    );\r\n                  })}\r\n                </List>\r\n              ) : null}\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              component=\"label\"\r\n              size=\"large\"\r\n              style={{\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n              onClick={handleClickEncryption}\r\n            >\r\n              암호화 실행\r\n            </Button>\r\n            {open && <Progressbar open={open} />}\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\directoryPathSetting.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\stringDecryption.js",["316"],"import React from \"react\";\r\nimport { Grid, Typography, Button, TextField } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport { useRef, useState } from \"react\";\r\nimport api from \"../../url/baseUrl\";\r\nconst StringDecryption = () => {\r\n  const [EncryptoionString, setEncryptoionString] = useState(\"\");\r\n  const [decryptionString, setDecryptionString] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  function handleClick() {\r\n    setEncryptoionString(inputRef.current.value);\r\n    /* 문자열 암호화 API */\r\n    api\r\n      .post(\"decrypt-direct\", {\r\n        cipherText: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDecryptionString(res.data.plainText);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"문자열 복호화\" />\r\n      <PageBody>\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n          }}\r\n        ></div>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n          <Grid item xs={6}>\r\n            <div\r\n              style={{\r\n                background: \"#177FF0\",\r\n                border: \"solid 1px #D5D5D5\",\r\n                borderRadius: \"20px\",\r\n                height: \"250px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontSize: \"30px\",\r\n                    }}\r\n                  >\r\n                    암호문\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                  <TextField\r\n                    fullWidth\r\n                    display=\"flex\"\r\n                    type=\"text\"\r\n                    multiline\r\n                    variant=\"standard\"\r\n                    inputRef={inputRef}\r\n                    minRows={4}\r\n                    style={{\r\n                      background: \"white\",\r\n                      border: \"1px solid gray\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    inputProps={{\r\n                      style: {\r\n                        textAlign: \"center\",\r\n                        fontSize: 13,\r\n                        color: \"black\",\r\n                      },\r\n                    }} // font size of input text\r\n                    placeholder=\"암호문\"\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              onClick={handleClick}\r\n              size=\"large\"\r\n              style={{\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              복호화 실행\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <div\r\n              style={{\r\n                background: \"#6799FF\",\r\n                border: \"solid 1px #D5D5D5\",\r\n                borderRadius: \"20px\",\r\n                height: \"250px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    align=\"center\"\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontSize: \"30px\",\r\n                    }}\r\n                  >\r\n                    평문\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                  <TextField\r\n                    fullWidth\r\n                    display=\"flex\"\r\n                    type=\"text\"\r\n                    multiline\r\n                    minRows={3}\r\n                    value={decryptionString}\r\n                    style={{\r\n                      background: \"white\",\r\n                      border: \"1px solid gray\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    inputProps={{\r\n                      style: {\r\n                        textAlign: \"center\",\r\n                        fontSize: 13,\r\n                        color: \"black\",\r\n                      },\r\n                    }} // font size of input text\r\n                    placeholder=\"평문\"\r\n                  ></TextField>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default StringDecryption;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\progressbar.js",[],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\fileDecryption.js",["317","318"],"import React from \"react\";\r\nimport { Grid, Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { DropzoneArea } from \"material-ui-dropzone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport api from \"../../url/baseUrl\";\r\nimport PathSetting from \"./filePathSetting\";\r\nimport Alert from \"@mui/material/Alert\";\r\n\r\nconst Posts = () => {\r\n  const [fileData, setFileData] = useState();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [startDecryption, setStartDecryption] = useState();\r\n  const inputRef = useRef(null);\r\n  const [directoryPath, setDirectoryPath] = useState();\r\n\r\n  useEffect(() => {\r\n    api.get(\"decrypt-file/path\", {}).then((res) => {\r\n      setDirectoryPath(res.data.body.decryptedFilePath);\r\n    });\r\n  }, []);\r\n\r\n  const pathSettinngHandleClick = (e) => {\r\n    api\r\n      .post(\"decrypt-file/path\", {\r\n        decryptedFilePath: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDirectoryPath(inputRef.current.value);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    responseType: \"blob\",\r\n  };\r\n\r\n  const handleClickDecryption = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", fileData);\r\n    setStartDecryption((startDecryption) => true);\r\n    setIsError((isError) => false);\r\n    setIsSuccess((isSuccess) => false);\r\n    api\r\n      .post(\r\n        \"decrypt-file\",\r\n        {\r\n          file: fileData,\r\n        },\r\n        { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n      )\r\n      .then((res) => {\r\n        if (res.data.decrypted) {\r\n          setIsSuccess((isSuccess) => true);\r\n        } else {\r\n          setIsError((isError) => true);\r\n        }\r\n        setStartDecryption((startDecryption) => false);\r\n      })\r\n      .catch((err) => {\r\n        setIsError((isError) => true);\r\n        setStartDecryption((startDecryption) => false);\r\n      });\r\n  };\r\n\r\n  const handleChange = (files) => {\r\n    setFileData(files[0]);\r\n  };\r\n\r\n  const MAX_SIZE = 2147483647;\r\n\r\n  const useStyles = makeStyles(() => ({\r\n    dropZone: {\r\n      height: \"100%\",\r\n      fullWidth: \"true\",\r\n    },\r\n    previewContainer: {\r\n      container: \"true\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n    preview: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      alignItems: \"center\",\r\n      item: \"true\",\r\n    },\r\n    previewImg: {\r\n      //height: '100%',\r\n      //width: '100%',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"파일 복호화\" />\r\n      <PageBody>\r\n        <div\r\n          style={{\r\n            height: \"100px\",\r\n          }}\r\n        ></div>\r\n        <PathSetting\r\n          pathSettinngHandleClick={pathSettinngHandleClick}\r\n          inputRef={inputRef}\r\n          setDirectoryPath={setDirectoryPath}\r\n          directoryPath={directoryPath}\r\n        ></PathSetting>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n          <Grid item xs={6}>\r\n            <div\r\n              style={{\r\n                background: \"#177FF0\",\r\n                border: \"solid 1px #D5D5D5\",\r\n                borderRadius: \"20px\",\r\n                height: \"content\",\r\n                padding: \"20px 0px 20px 0px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <Typography\r\n                    align=\"center\"\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontSize: \"30px\",\r\n                    }}\r\n                  >\r\n                    암호화 파일\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid\r\n                  item\r\n                  xs={10}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  <DropzoneArea\r\n                    maxFileSize={MAX_SIZE}\r\n                    acceptedFiles={[\r\n                      \"image/*\",\r\n                      \"video/*\",\r\n                      \"audio/*\",\r\n                      \"application/*,\",\r\n                      \"text/*\",\r\n                    ]}\r\n                    showFileNames\r\n                    dropzoneText=\"Upload file Drag or Click\"\r\n                    showAlerts={true}\r\n                    filesLimit={1}\r\n                    showFileNamesInPreview={false}\r\n                    onChange={handleChange.bind(this)}\r\n                    dropzoneClass={classes.dropZone}\r\n                    previewGridClasses={{\r\n                      item: classes.preview,\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              component=\"label\"\r\n              size=\"large\"\r\n              style={{\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n              onClick={handleClickDecryption}\r\n            >\r\n              복호화 실행\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {startDecryption ? (\r\n              <Alert severity=\"info\">복호화 진행중</Alert>\r\n            ) : null}\r\n            {isSuccess ? <Alert severity=\"success\">복호화 완료</Alert> : null}\r\n            {isError ? <Alert severity=\"error\">복호화 실패</Alert> : null}\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Decryption\\directoryDecryption.js",["319","320","321","322"],"import React, { useEffect } from \"react\";\r\nimport { Box, Grid, Button } from \"@material-ui/core\";\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport { useState, useRef } from \"react\";\r\nimport api from \"../../url/baseUrl\";\r\nimport PathSetting from \"./filePathSetting\";\r\nimport DirectoryPathSetting from \"./directoryPathSetting\";\r\n\r\nimport List from \"@mui/material/List\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport ErrorIcon from \"@mui/icons-material/Error\";\r\nimport Progressbar from \"./progressbar\";\r\n\r\nconst Posts = () => {\r\n  const inputRef = useRef(null);\r\n  const decryptionDirectoryPathRef = useRef(null);\r\n  const [deDirectoryPath, setDeDirectoryPath] = useState();\r\n  const [directoryPath, setDirectoryPath] = useState();\r\n  const [isDecryption, setIsDecryption] = useState(false);\r\n  const [directoryList, setDirectoryList] = useState();\r\n  const [deDirectoryList, setDeDirectoryList] = useState();\r\n  const [returnDirectoryList, setReturnDirectoryList] = useState();\r\n\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    api.get(\"decrypt-file/path\", {}).then((res) => {\r\n      setDirectoryPath(res.data.body.decryptedFilePath);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isDecryption) {\r\n      console.log(deDirectoryList);\r\n      setIsDecryption((isDecryption) => false);\r\n\r\n      api\r\n        .post(\"decrypt-multiple-file/run\", {\r\n          data: deDirectoryList,\r\n        })\r\n        .then((res) => {\r\n          //res.data 데이터 설정\r\n          setReturnDirectoryList((returnDirectoryList) => res.data.body.data);\r\n          console.log(res.data.body.data);\r\n\r\n          setOpen((prev) => !prev);\r\n        })\r\n        .catch((err) => {\r\n          setOpen((prev) => !prev);\r\n        });\r\n    }\r\n  }, [isDecryption]);\r\n\r\n  const pathSettinngHandleClick = (e) => {\r\n    api\r\n      .post(\"decrypt-file/path\", {\r\n        decryptedFilePath: inputRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDirectoryPath(inputRef.current.value);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const dePathSettinngHandleClick = (e) => {\r\n    api\r\n      .post(\"decrypt-multiple-file/path\", {\r\n        path: decryptionDirectoryPathRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.dirList);\r\n        setDeDirectoryPath(decryptionDirectoryPathRef.current.value);\r\n        setDirectoryList(res.data.dirList);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const handleClickDecryption = (e) => {\r\n    setOpen((prev) => !prev);\r\n    setDeDirectoryList([]);\r\n    setIsDecryption((isDecryption) => true);\r\n    for (let i = 0; i < checked.length; i++) {\r\n      setDeDirectoryList((deDirectoryList) => [\r\n        ...deDirectoryList,\r\n        {\r\n          index: checked[i],\r\n          fileName: deDirectoryPath + `/` + directoryList[checked[i]].fileName,\r\n        },\r\n      ]);\r\n\r\n      setChecked([]);\r\n    }\r\n  };\r\n\r\n  const handleToggle = (index) => () => {\r\n    const currentIndex = checked.indexOf(index);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(index);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"폴더 암호화\" />\r\n      <PageBody>\r\n        <div\r\n          style={{\r\n            height: \"100px\",\r\n          }}\r\n        ></div>\r\n        <PathSetting\r\n          pathSettinngHandleClick={pathSettinngHandleClick}\r\n          inputRef={inputRef}\r\n          directoryPath={directoryPath}\r\n        ></PathSetting>\r\n        <DirectoryPathSetting\r\n          dePathSettinngHandleClick={dePathSettinngHandleClick}\r\n          decryptionDirectoryPathRef={decryptionDirectoryPathRef}\r\n          deDirectoryPath={deDirectoryPath}\r\n        ></DirectoryPathSetting>\r\n        <Grid container spacing={3} justifyContent=\"center\">\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={8} align=\"center\">\r\n            <Box style={{ backgroundColor: \"#177FF0\", maxWidth: \"700px\" }}>\r\n              {directoryList != undefined ? (\r\n                <List\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    maxWidth: 600,\r\n                    bgcolor: \"background.paper\",\r\n                  }}\r\n                >\r\n                  {directoryList.map((list, index) => {\r\n                    const labelId = `checkbox-list-label-${index}`;\r\n\r\n                    return (\r\n                      <ListItem\r\n                        key={index}\r\n                        secondaryAction={\r\n                          returnDirectoryList != null\r\n                            ? returnDirectoryList.map((lists, i) =>\r\n                                lists.index == index ? (\r\n                                  lists.success == true ? (\r\n                                    <CheckCircleIcon key={i} color=\"success\" />\r\n                                  ) : (\r\n                                    <ErrorIcon key={i} color=\"disabled\" />\r\n                                  )\r\n                                ) : null\r\n                              )\r\n                            : null\r\n                        }\r\n                        disablePadding\r\n                      >\r\n                        <ListItemButton\r\n                          role={undefined}\r\n                          onClick={handleToggle(index)}\r\n                          dense\r\n                        >\r\n                          <ListItemIcon>\r\n                            <Checkbox\r\n                              edge=\"start\"\r\n                              checked={checked.indexOf(index) !== -1}\r\n                              tabIndex={-1}\r\n                              disableRipple\r\n                              inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                          </ListItemIcon>\r\n                          <ListItemText id={labelId} primary={list.fileName} />\r\n                        </ListItemButton>\r\n                      </ListItem>\r\n                    );\r\n                  })}\r\n                </List>\r\n              ) : null}\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              type=\"submit\"\r\n              component=\"label\"\r\n              size=\"large\"\r\n              style={{\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n              onClick={handleClickDecryption}\r\n            >\r\n              복호화 실행\r\n            </Button>\r\n            {open && <Progressbar open={open} />}\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\views\\Database\\setting.js",["323","324","325","326","327","328","329","330","331","332","333","334","335","336","337"],"import React from \"react\";\r\nimport {\r\n  TableContainer,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Table,\r\n  Paper,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  TableBody,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridValueGetterParams,\r\n  GridEventListener,\r\n} from \"@mui/x-data-grid\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nimport { PageBody, PageHeader } from \"../../components\";\r\nimport MainCard from \"../../components/MainCard\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { margin } from \"@mui/system\";\r\nimport api from \"../../url/baseUrl\";\r\nimport { Password } from \"@mui/icons-material\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst DBSetting = () => {\r\n  const [dbSelect, setDBSelect] = useState(\"\");\r\n  const [dbAddress, setDBAddress] = useState(\"\");\r\n  const [dbId, setDBId] = useState(\"\");\r\n  const [dbPw, setDBPw] = useState(\"\");\r\n  const [dbSchema, setDBSchema] = useState([]);\r\n  const [selectedSchema, setSelectedSchema] = useState([]);\r\n  const [dbTable, setDBTable] = useState([]);\r\n  const [selectedTable, setSelectedTable] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [cellSelect, setCellSelect] = useState(1);\r\n  const [isCsv, setIsCsv] = useState(false);\r\n  const [csvList, setCsvList] = useState([]);\r\n  const [selectCsvList, setSeletCsvList] = useState([]);\r\n  const [checkList, setCheckList] = useState([]);\r\n  const [dbStartList, setDbStartList] = useState([]);\r\n  const [csvButtonClick, setCsvButtonClick] = useState(false);\r\n\r\n  const inputDBAdrressRef = useRef(\"\");\r\n  const inputDBIdRef = useRef(\"\");\r\n  const inputDBPwRef = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    api.get(\"api/list/db\", {}).then((res) => {\r\n      setDbStartList(res.data.dbStartList);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .post(\"api/list/db/selectList\", {\r\n        dbStartList: dbStartList,\r\n      })\r\n      .then((res) => {});\r\n  }, [dbStartList]);\r\n\r\n  useEffect(() => {\r\n    if (csvButtonClick) {\r\n      api\r\n        .post(\"api/row-encrypt/db\", {\r\n          data: JSON.stringify(selectCsvList),\r\n        })\r\n        .then((res) => {\r\n          if (res.data.isValid) {\r\n            swal(\r\n              \"EXCEL Export 완료!\",\r\n              \"해당 테이블의 암호파일이 생성되었습니다\",\r\n              \"success\"\r\n            );\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n\r\n      setCsvButtonClick((csvButtonClick) => false);\r\n    }\r\n  }, [selectCsvList]);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .post(\"api/add/db\", {\r\n        dbStartList: dbStartList,\r\n      })\r\n      .then((res) => {})\r\n      .catch((err) => console.log(err));\r\n  }, [dbStartList]);\r\n\r\n  const dbmsList = [\"MariaDB\", \"MsSQL\", \"Oracle\", \"MySQL\"];\r\n\r\n  const onChangeDBList = (e) => {\r\n    const { name, value } = e.target;\r\n    setDBSelect((dbSelect) => value);\r\n  };\r\n\r\n  const onClickConnetion = (e) => {\r\n    setDBAddress(inputDBAdrressRef.current.value);\r\n    setDBId(inputDBIdRef.current.value);\r\n    setDBPw(inputDBPwRef.current.value);\r\n    if (dbSelect === \"\") {\r\n      swal(\"연결 실패!\", \"DBMS를 선택하셔야합니다.\", \"error\");\r\n    }\r\n    if (\r\n      inputDBAdrressRef.current.value == \"\" &&\r\n      inputDBIdRef.current.value == \"\" &&\r\n      inputDBPwRef.current.value == \"\"\r\n    ) {\r\n      swal(\"연결 실패!\", \"DB정보를 입력하셔야합니다.\", \"error\");\r\n    }\r\n    api\r\n      .post(\"dbConnect/init\", {\r\n        connectDBType: dbSelect,\r\n        dbAddress: inputDBAdrressRef.current.value,\r\n        userId: inputDBIdRef.current.value,\r\n        pwd: inputDBPwRef.current.value,\r\n      })\r\n      .then((res) => {\r\n        setDBSchema(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleSchemaChange = (event, row) => {\r\n    setSelectedSchema(row);\r\n    api\r\n      .post(\"dbConnect/schema\", {\r\n        schema: row,\r\n      })\r\n      .then((res) => {\r\n        setDBTable(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleTableChange = (event, row) => {\r\n    setSelectedTable(row);\r\n    api\r\n      .post(\"dbConnect/table\", {\r\n        tableName: row,\r\n      })\r\n      .then((res) => {\r\n        setColumns((columns) => res.data.fieldHeader);\r\n        setRows((rows) => res.data.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleCellClick = (event) => {\r\n    setCellSelect(event.row.id);\r\n  };\r\n\r\n  const onClickCSV = () => {\r\n    if (isCsv) setIsCsv(false);\r\n    else setIsCsv(true);\r\n  };\r\n\r\n  const onClickDownload = () => {\r\n    setCsvButtonClick((csvButtonClick) => true);\r\n    setIsCsv(false);\r\n    setSeletCsvList((setSeletCsvList) => []); //초기화\r\n\r\n    setSeletCsvList(\r\n      ...selectCsvList,\r\n      csvList.map((list) => rows[Number(list) - 1])\r\n    );\r\n  };\r\n\r\n  const onChangeSingleCheck = (e) => {\r\n    const { value, checked } = e.target;\r\n    let updateCheckList = [...checkList];\r\n    if (checked) {\r\n      updateCheckList = [...checkList, value];\r\n    } else {\r\n      updateCheckList.splice(checkList.indexOf(value), 1);\r\n    }\r\n    setCheckList(updateCheckList);\r\n  };\r\n\r\n  const onChangeAllCheck = (e) => {\r\n    const { value, checked } = e.target;\r\n    let list = [];\r\n    if (checked) {\r\n      dbStartList.map((row, i) => (list[i] = String(i)));\r\n    }\r\n    setCheckList(list);\r\n  };\r\n\r\n  const onClickDbDelete = () => {\r\n    let deleteApiList = [];\r\n    dbStartList.map((row, index) =>\r\n      checkList.includes(String(index)) ? null : deleteApiList.push(row)\r\n    );\r\n\r\n    setDbStartList((rows) => deleteApiList);\r\n    setCheckList([]);\r\n\r\n    api\r\n      .post(\"api/add/db\", {\r\n        deleteApiList: deleteApiList,\r\n      })\r\n      .then((res) => {})\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const onClickDBListSet = () => {\r\n    setDbStartList((dbStartList) => [\r\n      ...dbStartList,\r\n      {\r\n        dbmsName: dbSelect,\r\n        dbAddress: dbAddress,\r\n        userID: dbId,\r\n        userPW: dbPw,\r\n        schemaName: selectedSchema,\r\n        tableName: selectedTable,\r\n        startPoint: cellSelect,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageHeader title=\"환경설정 - DB 관리\" />\r\n      <PageBody>\r\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"30px\",\r\n              marginTop: \"20px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                background: \"#B2CCFF\",\r\n                height: \"50px\",\r\n                width: \"200px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                borderRadius: \"10px\",\r\n                minWidth: \"200px\",\r\n              }}\r\n            >\r\n              <span style={{ marginRight: \"10px\", fontWeight: \"bold\" }}>\r\n                DB종류\r\n              </span>\r\n              <FormControl variant=\"standard\" style={{ minWidth: \"80px\" }}>\r\n                <Select\r\n                  name=\"db\"\r\n                  value={dbSelect}\r\n                  onChange={onChangeDBList}\r\n                  label=\"DB종류\"\r\n                >\r\n                  {dbmsList.map((db, index) => (\r\n                    <MenuItem key={index} value={db}>\r\n                      <span style={{ fontWeight: \"bold\" }}>{db}</span>\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <div\r\n              style={{\r\n                border: \"2px solid #6799FF\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                minHeight: \"80px\",\r\n                borderRadius: \"20px\",\r\n                width: \"600px\",\r\n                margin: \"0px 50px 0px 50px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  width: \"80%\",\r\n                }}\r\n              >\r\n                <TextField\r\n                  display=\"flex\"\r\n                  type=\"text\"\r\n                  variant=\"standard\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    minWidth: \"200px\",\r\n                  }}\r\n                  inputProps={{\r\n                    style: {\r\n                      textAlign: \"center\",\r\n                      fontSize: 13,\r\n                      color: \"black\",\r\n                    },\r\n                  }} // font size of input text\r\n                  inputRef={inputDBAdrressRef}\r\n                  placeholder=\"DB 주소 입력 &#13;&#10; ex(localhost:3306)\"\r\n                ></TextField>\r\n              </div>\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                border: \"2px solid #6799FF\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                minHeight: \"80px\",\r\n                borderRadius: \"20px\",\r\n                width: \"600px\",\r\n                margin: \"0px 50px 0px 0px\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  width: \"40%\",\r\n                }}\r\n              >\r\n                <TextField\r\n                  display=\"flex\"\r\n                  type=\"text\"\r\n                  variant=\"standard\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    minWidth: \"200px\",\r\n                  }}\r\n                  inputProps={{\r\n                    style: {\r\n                      textAlign: \"center\",\r\n                      fontSize: 13,\r\n                      color: \"black\",\r\n                    },\r\n                  }} // font size of input text\r\n                  inputRef={inputDBIdRef}\r\n                  placeholder=\"DBMS ID입력 &#13;&#10; ex : root\"\r\n                ></TextField>\r\n                <div\r\n                  style={{\r\n                    marginLeft: \"20px\",\r\n                  }}\r\n                ></div>\r\n                <TextField\r\n                  display=\"flex\"\r\n                  type=\"Password\"\r\n                  variant=\"standard\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    minWidth: \"200px\",\r\n                  }}\r\n                  inputProps={{\r\n                    style: {\r\n                      textAlign: \"center\",\r\n                      fontSize: 13,\r\n                      color: \"black\",\r\n                    },\r\n                  }} // font size of input text\r\n                  inputRef={inputDBPwRef}\r\n                  placeholder=\"DBMS PW입력 &#13;&#10; ex : root\"\r\n                ></TextField>\r\n              </div>\r\n            </div>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"default\"\r\n              size=\"medium\"\r\n              disableRipple\r\n              onClick={onClickConnetion}\r\n              style={{\r\n                border: \"none\",\r\n                background: \"#6799FF\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              연결\r\n            </Button>\r\n          </div>\r\n          <Grid item xs={12}>\r\n            <MainCard>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                  <TableContainer\r\n                    component={Paper}\r\n                    style={{ background: \"#B2CCFF\", borderRadius: \"20px\" }}\r\n                  >\r\n                    <Table>\r\n                      <TableHead style={{ background: \"#6799FF\" }}>\r\n                        <TableRow>\r\n                          <TableCell\r\n                            align=\"center\"\r\n                            style={{\r\n                              color: \"white\",\r\n                              fontSize: \"20px\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            스키마 이름\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {dbSchema.map((row, index) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              key={index}\r\n                              sx={{\r\n                                \"&:last-child td, &:last-child th\": {\r\n                                  border: 1,\r\n                                },\r\n                              }}\r\n                              onClick={(event) =>\r\n                                handleSchemaChange(event, row.schemaName)\r\n                              }\r\n                              selected={row.schemaName === selectedSchema}\r\n                              value={row.schemaName}\r\n                            >\r\n                              <TableCell\r\n                                style={{ color: \"black\", fontWeight: \"bold\" }}\r\n                                align=\"center\"\r\n                              >\r\n                                {row.schemaName}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                  <TableContainer\r\n                    component={Paper}\r\n                    style={{ background: \"#B2CCFF\", borderRadius: \"20px\" }}\r\n                  >\r\n                    <Table>\r\n                      <TableHead style={{ background: \"#6799FF\" }}>\r\n                        <TableRow>\r\n                          <TableCell\r\n                            align=\"center\"\r\n                            style={{\r\n                              color: \"white\",\r\n                              fontSize: \"20px\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            테이블 이름\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {dbTable.map((row, index) => {\r\n                          return (\r\n                            <TableRow\r\n                              hover\r\n                              key={index}\r\n                              sx={{\r\n                                \"&:last-child td, &:last-child th\": {\r\n                                  border: 0,\r\n                                },\r\n                              }}\r\n                              onClick={(event) =>\r\n                                handleTableChange(event, row.tableName)\r\n                              }\r\n                              selected={row.tableName === selectedTable}\r\n                              value={row.tableName}\r\n                            >\r\n                              <TableCell\r\n                                align=\"center\"\r\n                                style={{ color: \"black\", fontWeight: \"bold\" }}\r\n                              >\r\n                                {row.tableName}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </MainCard>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <div\r\n              style={{\r\n                height: \"400px\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={5}\r\n                experimentalFeatures={{ newEditingApi: false }}\r\n                checkboxSelection={isCsv}\r\n                onCellClick={(event) => handleCellClick(event)}\r\n                onSelectionModelChange={(itm) => setCsvList(itm)}\r\n                column={{ background: \"black\" }}\r\n                style={{\r\n                  borderRadius: \"20px\",\r\n                }}\r\n              />\r\n            </div>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginTop: \"20px\" }}>\r\n            <Grid item xs={3} style={{ minWidth: \"340px\" }}>\r\n              <Grid container>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={4} style={{ minWidth: \"160px\" }}>\r\n                  <Button\r\n                    style={{\r\n                      minWidth: \"140px\",\r\n                      border: \"none\",\r\n                      background: \"#6799FF\",\r\n                      color: \"white\",\r\n                    }}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"small\"\r\n                    onClick={onClickCSV}\r\n                  >\r\n                    Exel파일 만들기\r\n                  </Button>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                  {isCsv ? (\r\n                    <Button\r\n                      style={{\r\n                        minWidth: \"140px\",\r\n                        border: \"none\",\r\n                        background: \"#6799FF\",\r\n                        color: \"white\",\r\n                      }}\r\n                      variant=\"contained\"\r\n                      color=\"default\"\r\n                      size=\"small\"\r\n                      onClick={onClickDownload}\r\n                    >\r\n                      Exel파일 다운로드\r\n                    </Button>\r\n                  ) : null}\r\n                </Grid>\r\n\r\n                <Grid item xs={3}></Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Box textAlign=\"center\">\r\n                <Button\r\n                  style={{\r\n                    minWidth: \"210px\",\r\n                    border: \"none\",\r\n                    background: \"#6799FF\",\r\n                    color: \"white\",\r\n                  }}\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  size=\"large\"\r\n                  onClick={onClickDBListSet}\r\n                >\r\n                  실시간 암호화 위치 지정\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            style={{\r\n              margin: \"auto\",\r\n              marginTop: \"20px\",\r\n              marginBottom: \"100px\",\r\n            }}\r\n          ></Grid>\r\n          <Grid container spacing={3} justifyContent=\"center\">\r\n            <Grid item xs={8}>\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        {dbStartList !== undefined ? (\r\n                          <Checkbox\r\n                            checked={dbStartList.length === checkList.length}\r\n                            onChange={onChangeAllCheck}\r\n                          ></Checkbox>\r\n                        ) : null}\r\n                      </TableCell>\r\n                      <TableCell>DBMS명</TableCell>\r\n                      <TableCell>DB주소</TableCell>\r\n                      <TableCell>UserID</TableCell>\r\n                      <TableCell>UserPW</TableCell>\r\n                      <TableCell>스키마명</TableCell>\r\n                      <TableCell>테이블명</TableCell>\r\n                      <TableCell>시작PK위치</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n\r\n                  {dbStartList !== undefined ? (\r\n                    <TableBody>\r\n                      {dbStartList.map((row, index) => {\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            key={index}\r\n                            sx={{\r\n                              \"&:last-child td, &:last-child th\": { border: 1 },\r\n                            }}\r\n                          >\r\n                            <TableCell>\r\n                              <Checkbox\r\n                                value={index}\r\n                                onChange={onChangeSingleCheck}\r\n                                checked={checkList.includes(String(index))}\r\n                              ></Checkbox>\r\n                            </TableCell>\r\n                            <TableCell>{row.dbmsName}</TableCell>\r\n                            <TableCell>{row.dbAddress}</TableCell>\r\n                            <TableCell>{row.userID}</TableCell>\r\n                            <TableCell>{row.userPW}</TableCell>\r\n                            <TableCell>{row.schemaName}</TableCell>\r\n                            <TableCell>{row.tableName}</TableCell>\r\n                            <TableCell>{row.startPoint}</TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </TableBody>\r\n                  ) : null}\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Grid item style={{ marginRight: \"20px\" }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={onClickDbDelete}\r\n                  style={{\r\n                    background: \"#6799FF\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  DB 삭제\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </PageBody>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DBSetting;\r\n","C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\url\\baseUrl.js",[],["338","339"],"C:\\Crypto_System\\Version2\\LEA128-Crypto-Front-Version2\\src\\components\\MainCard.js",[],{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","severity":1,"message":"345","line":19,"column":3,"nodeType":"346","messageId":"347","endLine":19,"endColumn":9},{"ruleId":"344","severity":1,"message":"348","line":25,"column":10,"nodeType":"346","messageId":"347","endLine":25,"endColumn":18},{"ruleId":"349","severity":1,"message":"350","line":41,"column":27,"nodeType":"351","messageId":"352","endLine":41,"endColumn":29},{"ruleId":"349","severity":1,"message":"350","line":53,"column":29,"nodeType":"351","messageId":"352","endLine":53,"endColumn":31},{"ruleId":"344","severity":1,"message":"353","line":1,"column":10,"nodeType":"346","messageId":"347","endLine":1,"endColumn":13},{"ruleId":"344","severity":1,"message":"354","line":1,"column":15,"nodeType":"346","messageId":"347","endLine":1,"endColumn":19},{"ruleId":"344","severity":1,"message":"355","line":1,"column":17,"nodeType":"346","messageId":"347","endLine":1,"endColumn":23},{"ruleId":"344","severity":1,"message":"353","line":2,"column":10,"nodeType":"346","messageId":"347","endLine":2,"endColumn":13},{"ruleId":"344","severity":1,"message":"356","line":2,"column":32,"nodeType":"346","messageId":"347","endLine":2,"endColumn":38},{"ruleId":"344","severity":1,"message":"357","line":2,"column":40,"nodeType":"346","messageId":"347","endLine":2,"endColumn":50},{"ruleId":"344","severity":1,"message":"358","line":4,"column":3,"nodeType":"346","messageId":"347","endLine":4,"endColumn":8},{"ruleId":"344","severity":1,"message":"359","line":5,"column":3,"nodeType":"346","messageId":"347","endLine":5,"endColumn":12},{"ruleId":"344","severity":1,"message":"360","line":6,"column":3,"nodeType":"346","messageId":"347","endLine":6,"endColumn":12},{"ruleId":"344","severity":1,"message":"361","line":7,"column":3,"nodeType":"346","messageId":"347","endLine":7,"endColumn":17},{"ruleId":"344","severity":1,"message":"362","line":8,"column":3,"nodeType":"346","messageId":"347","endLine":8,"endColumn":12},{"ruleId":"344","severity":1,"message":"363","line":9,"column":3,"nodeType":"346","messageId":"347","endLine":9,"endColumn":11},{"ruleId":"344","severity":1,"message":"364","line":10,"column":3,"nodeType":"346","messageId":"347","endLine":10,"endColumn":12},{"ruleId":"344","severity":1,"message":"365","line":17,"column":3,"nodeType":"346","messageId":"347","endLine":17,"endColumn":17},{"ruleId":"344","severity":1,"message":"357","line":18,"column":3,"nodeType":"346","messageId":"347","endLine":18,"endColumn":13},{"ruleId":"344","severity":1,"message":"366","line":16,"column":8,"nodeType":"346","messageId":"347","endLine":16,"endColumn":13},{"ruleId":"344","severity":1,"message":"367","line":26,"column":10,"nodeType":"346","messageId":"347","endLine":26,"endColumn":20},{"ruleId":"344","severity":1,"message":"358","line":4,"column":3,"nodeType":"346","messageId":"347","endLine":4,"endColumn":8},{"ruleId":"344","severity":1,"message":"359","line":5,"column":3,"nodeType":"346","messageId":"347","endLine":5,"endColumn":12},{"ruleId":"344","severity":1,"message":"360","line":6,"column":3,"nodeType":"346","messageId":"347","endLine":6,"endColumn":12},{"ruleId":"344","severity":1,"message":"361","line":7,"column":3,"nodeType":"346","messageId":"347","endLine":7,"endColumn":17},{"ruleId":"344","severity":1,"message":"362","line":8,"column":3,"nodeType":"346","messageId":"347","endLine":8,"endColumn":12},{"ruleId":"344","severity":1,"message":"363","line":9,"column":3,"nodeType":"346","messageId":"347","endLine":9,"endColumn":11},{"ruleId":"344","severity":1,"message":"364","line":10,"column":3,"nodeType":"346","messageId":"347","endLine":10,"endColumn":12},{"ruleId":"344","severity":1,"message":"365","line":17,"column":3,"nodeType":"346","messageId":"347","endLine":17,"endColumn":17},{"ruleId":"344","severity":1,"message":"357","line":18,"column":3,"nodeType":"346","messageId":"347","endLine":18,"endColumn":13},{"ruleId":"368","severity":1,"message":"369","line":1,"column":42,"nodeType":"351","messageId":"370","endLine":1,"endColumn":43},{"ruleId":"344","severity":1,"message":"371","line":8,"column":8,"nodeType":"346","messageId":"347","endLine":8,"endColumn":18},{"ruleId":"344","severity":1,"message":"366","line":5,"column":8,"nodeType":"346","messageId":"347","endLine":5,"endColumn":13},{"ruleId":"372","severity":1,"message":"373","line":54,"column":6,"nodeType":"374","endLine":54,"endColumn":15,"suggestions":"375"},{"ruleId":"344","severity":1,"message":"353","line":4,"column":3,"nodeType":"346","messageId":"347","endLine":4,"endColumn":6},{"ruleId":"344","severity":1,"message":"364","line":6,"column":3,"nodeType":"346","messageId":"347","endLine":6,"endColumn":12},{"ruleId":"344","severity":1,"message":"366","line":5,"column":8,"nodeType":"346","messageId":"347","endLine":5,"endColumn":13},{"ruleId":"372","severity":1,"message":"373","line":55,"column":6,"nodeType":"374","endLine":55,"endColumn":15,"suggestions":"376"},{"ruleId":"344","severity":1,"message":"377","line":84,"column":13,"nodeType":"346","messageId":"347","endLine":84,"endColumn":20},{"ruleId":"344","severity":1,"message":"353","line":5,"column":3,"nodeType":"346","messageId":"347","endLine":5,"endColumn":6},{"ruleId":"344","severity":1,"message":"378","line":24,"column":10,"nodeType":"346","messageId":"347","endLine":24,"endColumn":15},{"ruleId":"344","severity":1,"message":"379","line":24,"column":17,"nodeType":"346","messageId":"347","endLine":24,"endColumn":25},{"ruleId":"349","severity":1,"message":"380","line":33,"column":26,"nodeType":"351","messageId":"352","endLine":33,"endColumn":28},{"ruleId":"344","severity":1,"message":"381","line":52,"column":13,"nodeType":"346","messageId":"347","endLine":52,"endColumn":18},{"ruleId":"344","severity":1,"message":"382","line":7,"column":10,"nodeType":"346","messageId":"347","endLine":7,"endColumn":20},{"ruleId":"344","severity":1,"message":"383","line":1,"column":17,"nodeType":"346","messageId":"347","endLine":1,"endColumn":25},{"ruleId":"344","severity":1,"message":"384","line":3,"column":28,"nodeType":"346","messageId":"347","endLine":3,"endColumn":32},{"ruleId":"372","severity":1,"message":"385","line":59,"column":6,"nodeType":"374","endLine":59,"endColumn":20,"suggestions":"386"},{"ruleId":"349","severity":1,"message":"350","line":136,"column":30,"nodeType":"351","messageId":"352","endLine":136,"endColumn":32},{"ruleId":"349","severity":1,"message":"380","line":153,"column":45,"nodeType":"351","messageId":"352","endLine":153,"endColumn":47},{"ruleId":"349","severity":1,"message":"380","line":154,"column":49,"nodeType":"351","messageId":"352","endLine":154,"endColumn":51},{"ruleId":"344","severity":1,"message":"387","line":7,"column":10,"nodeType":"346","messageId":"347","endLine":7,"endColumn":27},{"ruleId":"344","severity":1,"message":"364","line":2,"column":24,"nodeType":"346","messageId":"347","endLine":2,"endColumn":33},{"ruleId":"344","severity":1,"message":"388","line":35,"column":9,"nodeType":"346","messageId":"347","endLine":35,"endColumn":15},{"ruleId":"372","severity":1,"message":"389","line":59,"column":6,"nodeType":"374","endLine":59,"endColumn":20,"suggestions":"390"},{"ruleId":"349","severity":1,"message":"350","line":136,"column":30,"nodeType":"351","messageId":"352","endLine":136,"endColumn":32},{"ruleId":"349","severity":1,"message":"380","line":153,"column":45,"nodeType":"351","messageId":"352","endLine":153,"endColumn":47},{"ruleId":"349","severity":1,"message":"380","line":154,"column":49,"nodeType":"351","messageId":"352","endLine":154,"endColumn":51},{"ruleId":"344","severity":1,"message":"391","line":5,"column":3,"nodeType":"346","messageId":"347","endLine":5,"endColumn":13},{"ruleId":"344","severity":1,"message":"357","line":10,"column":3,"nodeType":"346","messageId":"347","endLine":10,"endColumn":13},{"ruleId":"344","severity":1,"message":"392","line":23,"column":3,"nodeType":"346","messageId":"347","endLine":23,"endColumn":13},{"ruleId":"344","severity":1,"message":"393","line":24,"column":3,"nodeType":"346","messageId":"347","endLine":24,"endColumn":24},{"ruleId":"344","severity":1,"message":"394","line":25,"column":3,"nodeType":"346","messageId":"347","endLine":25,"endColumn":20},{"ruleId":"344","severity":1,"message":"395","line":27,"column":8,"nodeType":"346","messageId":"347","endLine":27,"endColumn":17},{"ruleId":"344","severity":1,"message":"396","line":28,"column":8,"nodeType":"346","messageId":"347","endLine":28,"endColumn":17},{"ruleId":"344","severity":1,"message":"397","line":33,"column":10,"nodeType":"346","messageId":"347","endLine":33,"endColumn":16},{"ruleId":"344","severity":1,"message":"398","line":35,"column":10,"nodeType":"346","messageId":"347","endLine":35,"endColumn":18},{"ruleId":"372","severity":1,"message":"399","line":94,"column":6,"nodeType":"374","endLine":94,"endColumn":21,"suggestions":"400"},{"ruleId":"344","severity":1,"message":"401","line":108,"column":13,"nodeType":"346","messageId":"347","endLine":108,"endColumn":17},{"ruleId":"349","severity":1,"message":"380","line":120,"column":39,"nodeType":"351","messageId":"352","endLine":120,"endColumn":41},{"ruleId":"349","severity":1,"message":"380","line":121,"column":34,"nodeType":"351","messageId":"352","endLine":121,"endColumn":36},{"ruleId":"349","severity":1,"message":"380","line":122,"column":34,"nodeType":"351","messageId":"352","endLine":122,"endColumn":36},{"ruleId":"344","severity":1,"message":"381","line":196,"column":13,"nodeType":"346","messageId":"347","endLine":196,"endColumn":18},{"ruleId":"340","replacedBy":"402"},{"ruleId":"342","replacedBy":"403"},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"no-unused-vars","'GitHub' is defined but never used.","Identifier","unusedVar","'Favorite' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Box' is defined but never used.","'Grid' is defined but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'axios' is defined but never used.","'requestLog' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Looks4Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentDate' and 'standardTime'. Either include them or remove the dependency array.","ArrayExpression",["406"],["407"],"'nowTime' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","Expected '===' and instead saw '=='.","'value' is assigned a value but never used.","'stringData' is assigned a value but never used.","'useState' is defined but never used.","'Fade' is defined but never used.","React Hook useEffect has a missing dependency: 'enDirectoryList'. Either include it or remove the dependency array.",["408"],"'EncryptoionString' is assigned a value but never used.","'config' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'deDirectoryList'. Either include it or remove the dependency array.",["409"],"'InputLabel' is defined but never used.","'GridColDef' is defined but never used.","'GridValueGetterParams' is defined but never used.","'GridEventListener' is defined but never used.","'CheckIcon' is defined but never used.","'CloseIcon' is defined but never used.","'margin' is defined but never used.","'Password' is defined but never used.","React Hook useEffect has a missing dependency: 'csvButtonClick'. Either include it or remove the dependency array.",["410"],"'name' is assigned a value but never used.",["404"],["405"],"no-global-assign","no-unsafe-negation",{"desc":"411","fix":"412"},{"desc":"411","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},"Update the dependencies array to be: [currentDate, running, standardTime]",{"range":"420","text":"421"},{"range":"422","text":"421"},"Update the dependencies array to be: [enDirectoryList, isEncryption]",{"range":"423","text":"424"},"Update the dependencies array to be: [deDirectoryList, isDecryption]",{"range":"425","text":"426"},"Update the dependencies array to be: [csvButtonClick, selectCsvList]",{"range":"427","text":"428"},[1555,1564],"[currentDate, running, standardTime]",[1659,1668],[2096,2110],"[enDirectoryList, isEncryption]",[2096,2110],"[deDirectoryList, isDecryption]",[2625,2640],"[csvButtonClick, selectCsvList]"]